{"ast":null,"code":"(function () {\n  var d = window.AmCharts;\n  d.AmStockChart = d.Class({\n    construct: function (a) {\n      this.type = \"stock\";\n      this.cname = \"AmStockChart\";\n      d.addChart(this);\n      this.version = \"3.14.1\";\n      this.theme = a;\n      this.createEvents(\"zoomed\", \"rollOverStockEvent\", \"rollOutStockEvent\", \"clickStockEvent\", \"panelRemoved\", \"dataUpdated\", \"init\", \"rendered\", \"drawn\", \"resized\");\n      this.colors = \"#FF6600 #FCD202 #B0DE09 #0D8ECF #2A0CD0 #CD0D74 #CC0000 #00CC00 #0000CC #DDDDDD #999999 #333333 #990000\".split(\" \");\n      this.firstDayOfWeek = 1;\n      this.glueToTheEnd = !1;\n      this.dataSetCounter = -1;\n      this.zoomOutOnDataSetChange = !1;\n      this.panels = [];\n      this.dataSets = [];\n      this.chartCursors = [];\n      this.comparedDataSets = [];\n      this.classNamePrefix = \"amcharts\";\n      this.categoryAxesSettings = new d.CategoryAxesSettings(a);\n      this.valueAxesSettings = new d.ValueAxesSettings(a);\n      this.panelsSettings = new d.PanelsSettings(a);\n      this.chartScrollbarSettings = new d.ChartScrollbarSettings(a);\n      this.chartCursorSettings = new d.ChartCursorSettings(a);\n      this.stockEventsSettings = new d.StockEventsSettings(a);\n      this.legendSettings = new d.LegendSettings(a);\n      this.balloon = new d.AmBalloon(a);\n      this.previousEndDate = new Date(0);\n      this.previousStartDate = new Date(0);\n      this.dataSetCount = this.graphCount = 0;\n      this.chartCreated = !1;\n      this.extendToFullPeriod = !0;\n      d.applyTheme(this, a, this.cname);\n    },\n    write: function (a) {\n      var b = this.theme;\n      this.initHC || (d.callInitHandler(this), this.initHC = !0);\n      d.applyLang(this.language, this);\n      this.chartCursors = [];\n      var c = this.exportConfig;\n      c && d.AmExport && !this.AmExport && (this.AmExport = new d.AmExport(this, c));\n      this.amExport && d.AmExport && (this.AmExport = d.extend(this.amExport, new d.AmExport(this), !0));\n      this.AmExport && this.AmExport.init();\n      this.chartRendered = !1;\n      a = \"object\" != typeof a ? document.getElementById(a) : a;\n      this.zoomOutOnDataSetChange && (this.endDate = this.startDate = void 0);\n      this.categoryAxesSettings = d.processObject(this.categoryAxesSettings, d.CategoryAxesSettings, b);\n      this.valueAxesSettings = d.processObject(this.valueAxesSettings, d.ValueAxesSettings, b);\n      this.chartCursorSettings = d.processObject(this.chartCursorSettings, d.ChartCursorSettings, b);\n      this.chartScrollbarSettings = d.processObject(this.chartScrollbarSettings, d.ChartScrollbarSettings, b);\n      this.legendSettings = d.processObject(this.legendSettings, d.LegendSettings, b);\n      this.panelsSettings = d.processObject(this.panelsSettings, d.PanelsSettings, b);\n      this.stockEventsSettings = d.processObject(this.stockEventsSettings, d.StockEventsSettings, b);\n      this.dataSetSelector && (this.dataSetSelector = d.processObject(this.dataSetSelector, d.DataSetSelector, b));\n      this.periodSelector && (this.periodSelector = d.processObject(this.periodSelector, d.PeriodSelector, b));\n      a.innerHTML = \"\";\n      this.div = a;\n      this.measure();\n      this.createLayout();\n      this.updateDataSets();\n      this.addDataSetSelector();\n      this.addPeriodSelector();\n      this.addPanels();\n      this.updatePanels();\n      this.addChartScrollbar();\n      this.updateData();\n      this.skipDefault || this.setDefaultPeriod();\n    },\n    setDefaultPeriod: function (a) {\n      var b = this.periodSelector;\n      b && (this.animationPlayed = !1, b.setDefaultPeriod(a));\n    },\n    validateSize: function () {\n      this.measurePanels();\n    },\n    updateDataSets: function () {\n      var a = this.mainDataSet,\n          b = this.dataSets,\n          c;\n\n      for (c = 0; c < b.length; c++) {\n        var e = b[c],\n            e = d.processObject(e, d.DataSet);\n        b[c] = e;\n        e.id || (this.dataSetCount++, e.id = \"ds\" + this.dataSetCount);\n        void 0 === e.color && (e.color = this.colors.length - 1 > c ? this.colors[c] : d.randomColor());\n      }\n\n      !a && d.ifArray(b) && (this.mainDataSet = this.dataSets[0]);\n    },\n    updateEvents: function (a) {\n      d.ifArray(a.stockEvents) && d.parseEvents(a, this.panels, this.stockEventsSettings, this.firstDayOfWeek, this, this.dataDateFormat);\n    },\n    getLastDate: function (a) {\n      a = d.getDate(a, this.dataDateFormat, \"fff\");\n      return new Date(d.changeDate(a, this.categoryAxesSettings.minPeriod, 1, !0).getTime() - 1);\n    },\n    getFirstDate: function (a) {\n      a = d.getDate(a, this.dataDateFormat, \"fff\");\n      return new Date(d.resetDateToMin(a, this.categoryAxesSettings.minPeriod, 1, this.firstDayOfWeek));\n    },\n    updateData: function () {\n      var a = this.mainDataSet;\n\n      if (a) {\n        var b = this.categoryAxesSettings;\n        -1 == d.getItemIndex(b.minPeriod, b.groupToPeriods) && b.groupToPeriods.unshift(b.minPeriod);\n        var c = a.dataProvider;\n\n        if (d.ifArray(c)) {\n          var e = a.categoryField;\n          this.firstDate = this.getFirstDate(c[0][e]);\n          this.lastDate = this.getLastDate(c[c.length - 1][e]);\n          this.periodSelector && this.periodSelector.setRanges(this.firstDate, this.lastDate);\n          a.dataParsed || (d.parseStockData(a, b.minPeriod, b.groupToPeriods, this.firstDayOfWeek, this.dataDateFormat), a.dataParsed = !0);\n          this.updateComparingData();\n          this.updateEvents(a);\n        } else this.lastDate = this.firstDate = void 0;\n\n        this.glueToTheEnd && this.startDate && this.endDate && this.lastDate && (this.startDate = new Date(this.startDate.getTime() + (this.lastDate.getTime() - this.endDate.getTime())), this.endDate = this.lastDate, this.updateScrollbar = !0);\n        this.updatePanelsWithNewData();\n      }\n\n      a = {\n        type: \"dataUpdated\",\n        chart: this\n      };\n      this.fire(a.type, a);\n    },\n    updateComparingData: function () {\n      var a = this.comparedDataSets,\n          b = this.categoryAxesSettings,\n          c;\n\n      for (c = 0; c < a.length; c++) {\n        var e = a[c];\n        e.dataParsed || (d.parseStockData(e, b.minPeriod, b.groupToPeriods, this.firstDayOfWeek, this.dataDateFormat), e.dataParsed = !0);\n        this.updateEvents(e);\n      }\n    },\n    createLayout: function () {\n      var a = this.div,\n          b,\n          c,\n          e = this.classNamePrefix,\n          d = document.createElement(\"div\");\n      d.style.position = \"relative\";\n      this.containerDiv = d;\n      d.className = e + \"-stock-div\";\n      a.appendChild(d);\n      if (a = this.periodSelector) b = a.position;\n      if (a = this.dataSetSelector) c = a.position;\n      if (\"left\" == b || \"left\" == c) a = document.createElement(\"div\"), a.className = e + \"-left-div\", a.style.cssFloat = \"left\", a.style.styleFloat = \"left\", a.style.width = \"0px\", a.style.position = \"absolute\", d.appendChild(a), this.leftContainer = a;\n      if (\"right\" == b || \"right\" == c) b = document.createElement(\"div\"), b.className = e + \"-right-div\", b.style.cssFloat = \"right\", b.style.styleFloat = \"right\", b.style.width = \"0px\", d.appendChild(b), this.rightContainer = b;\n      b = document.createElement(\"div\");\n      b.className = e + \"-center-div\";\n      d.appendChild(b);\n      this.centerContainer = b;\n      d = document.createElement(\"div\");\n      d.className = e + \"-panels-div\";\n      b.appendChild(d);\n      this.panelsContainer = d;\n    },\n    addPanels: function () {\n      this.measurePanels(!0);\n\n      for (var a = this.panels, b = 0; b < a.length; b++) {\n        var c = a[b],\n            c = d.processObject(c, d.StockPanel, this.theme, !0);\n        a[b] = c;\n        this.addStockPanel(c, b);\n      }\n\n      this.panelsAdded = !0;\n    },\n    measurePanels: function (a) {\n      this.measure();\n      var b = this.chartScrollbarSettings,\n          c = this.divRealHeight,\n          e = this.divRealWidth;\n\n      if (this.div) {\n        var d = this.panelsSettings.panelSpacing;\n        b.enabled && (c -= b.height);\n        (b = this.periodSelector) && !b.vertical && (b = b.offsetHeight, c -= b + d);\n        (b = this.dataSetSelector) && !b.vertical && (b = b.offsetHeight, c -= b + d);\n        a || c == this.prevPH && this.prevPW == e || this.fire(\"resized\", {\n          type: \"resized\",\n          chart: this\n        });\n        this.prevPW != e && (this.prevPW = e);\n\n        if (c != this.prevPH) {\n          a = this.panels;\n          0 < c && (this.panelsContainer.style.height = c + \"px\");\n\n          for (var e = 0, l, b = 0; b < a.length; b++) if (l = a[b]) {\n            var k = l.percentHeight;\n            isNaN(k) && (k = 100 / a.length, l.percentHeight = k);\n            e += k;\n          }\n\n          this.panelsHeight = Math.max(c - d * (a.length - 1), 0);\n\n          for (b = 0; b < a.length; b++) if (l = a[b]) l.percentHeight = l.percentHeight / e * 100, l.panelBox && (l.panelBox.style.height = Math.round(l.percentHeight * this.panelsHeight / 100) + \"px\");\n\n          this.prevPH = c;\n        }\n      }\n    },\n    addStockPanel: function (a, b) {\n      var c = this.panelsSettings,\n          e = document.createElement(\"div\");\n      0 < b && !this.panels[b - 1].showCategoryAxis && (e.style.marginTop = c.panelSpacing + \"px\");\n      a.hideBalloonReal();\n      a.panelBox = e;\n      a.stockChart = this;\n      a.id || (a.id = \"stockPanel\" + b);\n      e.className = \"amChartsPanel \" + this.classNamePrefix + \"-stock-panel-div \" + this.classNamePrefix + \"-stock-panel-div-\" + a.id;\n      a.pathToImages = this.pathToImages;\n      e.style.height = Math.round(a.percentHeight * this.panelsHeight / 100) + \"px\";\n      e.style.width = \"100%\";\n      this.panelsContainer.appendChild(e);\n      0 < c.backgroundAlpha && (e.style.backgroundColor = c.backgroundColor);\n      if (e = a.stockLegend) e = d.processObject(e, d.StockLegend, this.theme), e.container = void 0, e.title = a.title, e.marginLeft = c.marginLeft, e.marginRight = c.marginRight, e.verticalGap = 3, e.position = \"top\", d.copyProperties(this.legendSettings, e), a.addLegend(e, e.divId);\n      a.zoomOutText = \"\";\n      this.addCursor(a);\n    },\n    enableCursors: function (a) {\n      var b = this.chartCursors,\n          c;\n\n      for (c = 0; c < b.length; c++) b[c].enabled = a;\n    },\n    updatePanels: function () {\n      var a = this.panels,\n          b;\n\n      for (b = 0; b < a.length; b++) this.updatePanel(a[b]);\n\n      this.mainDataSet && this.updateGraphs();\n      this.currentPeriod = void 0;\n    },\n    updatePanel: function (a) {\n      a.seriesIdField = \"amCategoryIdField\";\n      a.dataProvider = [];\n      a.chartData = [];\n      a.graphs = [];\n      var b = a.categoryAxis,\n          c = this.categoryAxesSettings;\n      d.copyProperties(this.panelsSettings, a);\n      d.copyProperties(c, b);\n      b.parseDates = !0;\n      a.addClassNames = this.addClassNames;\n      a.classNamePrefix = this.classNamePrefix;\n      a.zoomOutOnDataUpdate = !1;\n      a.mouseWheelScrollEnabled = this.mouseWheelScrollEnabled;\n      a.dataDateFormat = this.dataDateFormat;\n      a.language = this.language;\n      a.showCategoryAxis ? \"top\" == b.position ? a.marginTop = c.axisHeight : a.marginBottom = c.axisHeight : (a.categoryAxis.labelsEnabled = !1, a.chartCursor && (a.chartCursor.categoryBalloonEnabled = !1));\n      var c = a.valueAxes,\n          e = c.length,\n          h;\n      0 === e && (h = new d.ValueAxis(this.theme), a.addValueAxis(h));\n      b = new d.AmBalloon(this.theme);\n      d.copyProperties(this.balloon, b);\n      a.balloon = b;\n      c = a.valueAxes;\n      e = c.length;\n\n      for (b = 0; b < e; b++) h = c[b], d.copyProperties(this.valueAxesSettings, h);\n\n      a.listenersAdded = !1;\n      a.write(a.panelBox);\n    },\n    zoom: function (a, b) {\n      this.zoomChart(a, b);\n    },\n    zoomOut: function () {\n      this.zoomChart(this.firstDate, this.lastDate);\n    },\n    updatePanelsWithNewData: function () {\n      var a = this.mainDataSet,\n          b = this.scrollbarChart;\n\n      if (a) {\n        var c = this.panels;\n        this.currentPeriod = void 0;\n        var e;\n\n        for (e = 0; e < c.length; e++) {\n          var d = c[e];\n          d.categoryField = a.categoryField;\n          0 === a.dataProvider.length && (d.dataProvider = []);\n          d.scrollbarChart = b;\n        }\n\n        b && (c = this.categoryAxesSettings, e = c.minPeriod, b.categoryField = a.categoryField, 0 < a.dataProvider.length ? (d = this.chartScrollbarSettings.usePeriod, b.dataProvider = d ? a.agregatedDataProviders[d] : a.agregatedDataProviders[e]) : b.dataProvider = [], d = b.categoryAxis, d.minPeriod = e, d.firstDayOfWeek = this.firstDayOfWeek, d.equalSpacing = c.equalSpacing, d.axisAlpha = 0, d.markPeriodChange = c.markPeriodChange, b.bbsetr = !0, b.validateData(), c = this.panelsSettings, b.maxSelectedTime = c.maxSelectedTime, b.minSelectedTime = c.minSelectedTime);\n        0 < a.dataProvider.length && this.zoomChart(this.startDate, this.endDate);\n      }\n\n      this.panelDataInvalidated = !1;\n    },\n    addChartScrollbar: function () {\n      var a = this.chartScrollbarSettings,\n          b = this.scrollbarChart;\n      b && (b.clear(), b.destroy());\n\n      if (a.enabled) {\n        var c = this.panelsSettings,\n            e = this.categoryAxesSettings,\n            b = new d.AmSerialChart(this.theme);\n        b.language = this.language;\n        b.pathToImages = this.pathToImages;\n        b.autoMargins = !1;\n        this.scrollbarChart = b;\n        b.id = \"scrollbarChart\";\n        b.scrollbarOnly = !0;\n        b.zoomOutText = \"\";\n        b.marginLeft = c.marginLeft;\n        b.marginRight = c.marginRight;\n        b.marginTop = 0;\n        b.marginBottom = 0;\n        var c = e.dateFormats,\n            h = b.categoryAxis;\n        h.boldPeriodBeginning = e.boldPeriodBeginning;\n        c && (h.dateFormats = e.dateFormats);\n        h.labelsEnabled = !1;\n        h.parseDates = !0;\n        e = a.graph;\n\n        if (d.isString(e)) {\n          c = this.panels;\n\n          for (h = 0; h < c.length; h++) {\n            var l = d.getObjById(c[h].stockGraphs, a.graph);\n            l && (e = l);\n          }\n\n          a.graph = e;\n        }\n\n        var k;\n        e && (k = new d.AmGraph(this.theme), k.valueField = e.valueField, k.periodValue = e.periodValue, k.type = e.type, k.connect = e.connect, k.minDistance = a.minDistance, b.addGraph(k));\n        e = new d.ChartScrollbar(this.theme);\n        b.addChartScrollbar(e);\n        d.copyProperties(a, e);\n        e.scrollbarHeight = a.height;\n        e.graph = k;\n        this.listenTo(e, \"zoomed\", this.handleScrollbarZoom);\n        k = document.createElement(\"div\");\n        k.className = this.classNamePrefix + \"-scrollbar-chart-div\";\n        k.style.height = a.height + \"px\";\n        e = this.periodSelectorContainer;\n        c = this.periodSelector;\n        h = this.centerContainer;\n        \"bottom\" == a.position ? c ? \"bottom\" == c.position ? h.insertBefore(k, e) : h.appendChild(k) : h.appendChild(k) : c ? \"top\" == c.position ? h.insertBefore(k, e.nextSibling) : h.insertBefore(k, h.firstChild) : h.insertBefore(k, h.firstChild);\n        b.write(k);\n      }\n    },\n    handleScrollbarZoom: function (a) {\n      if (this.skipScrollbarEvent) this.skipScrollbarEvent = !1;else {\n        var b = a.endDate,\n            c = {};\n        c.startDate = a.startDate;\n        c.endDate = b;\n        this.updateScrollbar = !1;\n        this.handleZoom(c);\n      }\n    },\n    addPeriodSelector: function () {\n      var a = this.periodSelector;\n\n      if (a) {\n        var b = this.categoryAxesSettings.minPeriod;\n        a.minDuration = d.getPeriodDuration(b);\n        a.minPeriod = b;\n        a.chart = this;\n        var c = this.dataSetSelector,\n            e,\n            b = this.dssContainer;\n        c && (e = c.position);\n        var c = this.panelsSettings.panelSpacing,\n            h = document.createElement(\"div\");\n        this.periodSelectorContainer = h;\n        var l = this.leftContainer,\n            k = this.rightContainer,\n            g = this.centerContainer,\n            m = this.panelsContainer,\n            f = a.width + 2 * c + \"px\";\n\n        switch (a.position) {\n          case \"left\":\n            l.style.width = a.width + \"px\";\n            l.appendChild(h);\n            g.style.paddingLeft = f;\n            break;\n\n          case \"right\":\n            g.style.marginRight = f;\n            k.appendChild(h);\n            k.style.width = a.width + \"px\";\n            break;\n\n          case \"top\":\n            m.style.clear = \"both\";\n            g.insertBefore(h, m);\n            h.style.paddingBottom = c + \"px\";\n            h.style.overflow = \"hidden\";\n            break;\n\n          case \"bottom\":\n            h.style.marginTop = c + \"px\", \"bottom\" == e ? g.insertBefore(h, b) : g.appendChild(h);\n        }\n\n        this.listenTo(a, \"changed\", this.handlePeriodSelectorZoom);\n        a.write(h);\n      }\n    },\n    addDataSetSelector: function () {\n      var a = this.dataSetSelector;\n\n      if (a) {\n        a.chart = this;\n        a.dataProvider = this.dataSets;\n        var b = a.position,\n            c = this.panelsSettings.panelSpacing,\n            e = document.createElement(\"div\");\n        this.dssContainer = e;\n        var d = this.leftContainer,\n            l = this.rightContainer,\n            k = this.centerContainer,\n            g = this.panelsContainer,\n            c = a.width + 2 * c + \"px\";\n\n        switch (b) {\n          case \"left\":\n            d.style.width = a.width + \"px\";\n            d.appendChild(e);\n            k.style.paddingLeft = c;\n            break;\n\n          case \"right\":\n            k.style.marginRight = c;\n            l.appendChild(e);\n            l.style.width = a.width + \"px\";\n            break;\n\n          case \"top\":\n            g.style.clear = \"both\";\n            k.insertBefore(e, g);\n            e.style.overflow = \"hidden\";\n            break;\n\n          case \"bottom\":\n            k.appendChild(e);\n        }\n\n        a.write(e);\n      }\n    },\n    handlePeriodSelectorZoom: function (a) {\n      var b = this.scrollbarChart;\n      b && (b.updateScrollbar = !0);\n      a.predefinedPeriod ? (this.predefinedStart = a.startDate, this.predefinedEnd = a.endDate) : this.predefinedEnd = this.predefinedStart = null;\n      this.zoomChart(a.startDate, a.endDate);\n    },\n    addCursor: function (a) {\n      var b = this.chartCursorSettings;\n\n      if (b.enabled) {\n        var c = new d.ChartCursor(this.theme);\n        d.copyProperties(b, c);\n        a.chartCursor && d.copyProperties(a.chartCursor, c);\n        a.removeChartCursor();\n        a.addChartCursor(c);\n        this.listenTo(c, \"changed\", this.handleCursorChange);\n        this.listenTo(c, \"onHideCursor\", this.hideChartCursor);\n        this.listenTo(c, \"zoomed\", this.handleCursorZoom);\n        this.chartCursors.push(c);\n      }\n    },\n    hideChartCursor: function () {\n      var a = this.chartCursors,\n          b;\n\n      for (b = 0; b < a.length; b++) {\n        var c = a[b];\n        c.hideCursor(!1);\n        (c = c.chart) && c.updateLegendValues();\n      }\n    },\n    handleCursorZoom: function (a) {\n      var b = this.scrollbarChart;\n      b && (b.updateScrollbar = !0);\n      var b = {},\n          c;\n\n      if (this.categoryAxesSettings.equalSpacing) {\n        var e = this.mainDataSet.categoryField,\n            d = this.mainDataSet.agregatedDataProviders[this.currentPeriod];\n        c = new Date(d[a.start][e]);\n        a = new Date(d[a.end][e]);\n      } else c = new Date(a.start), a = new Date(a.end);\n\n      b.startDate = c;\n      b.endDate = a;\n      this.handleZoom(b);\n    },\n    handleZoom: function (a) {\n      this.zoomChart(a.startDate, a.endDate);\n    },\n    zoomChart: function (a, b) {\n      var c = new Date(a),\n          e = this,\n          h = e.firstDate,\n          l = e.lastDate,\n          k = e.currentPeriod,\n          g = e.categoryAxesSettings,\n          m = g.minPeriod,\n          f = e.panelsSettings,\n          p = e.periodSelector,\n          r = e.panels,\n          t = e.comparedGraphs,\n          x = e.scrollbarChart,\n          y = e.firstDayOfWeek;\n\n      if (h && l) {\n        a || (a = h);\n        b || (b = l);\n\n        if (k) {\n          var n = d.extractPeriod(k);\n          a.getTime() == b.getTime() && n != m && (b = d.changeDate(b, n.period, n.count), b.setTime(b.getTime() - 1));\n        }\n\n        a.getTime() < h.getTime() && (a = h);\n        a.getTime() > l.getTime() && (a = l);\n        b.getTime() < h.getTime() && (b = h);\n        b.getTime() > l.getTime() && (b = l);\n        m = d.getItemIndex(m, g.groupToPeriods);\n        g = k;\n        k = e.choosePeriod(m, a, b);\n        e.currentPeriod = k;\n        var m = d.extractPeriod(k),\n            z = d.getPeriodDuration(m.period, m.count);\n        1 > b.getTime() - a.getTime() && (a = new Date(b.getTime() - 1));\n        n = d.newDate(a);\n        e.extendToFullPeriod && (n.getTime() - h.getTime() < .1 * z && (n = d.resetDateToMin(a, m.period, m.count, y)), l.getTime() - b.getTime() < .1 * z && (b = d.resetDateToMin(l, m.period, m.count, y), b = d.changeDate(b, m.period, m.count, !0)));\n\n        for (h = 0; h < r.length; h++) l = r[h], l.chartCursor && l.chartCursor.panning && (n = c);\n\n        for (h = 0; h < r.length; h++) {\n          l = r[h];\n\n          if (k != g) {\n            for (c = 0; c < t.length; c++) z = t[c].graph, z.dataProvider = z.dataSet.agregatedDataProviders[k];\n\n            c = l.categoryAxis;\n            c.firstDayOfWeek = y;\n            c.minPeriod = k;\n            l.dataProvider = e.mainDataSet.agregatedDataProviders[k];\n            if (c = l.chartCursor) c.categoryBalloonDateFormat = e.chartCursorSettings.categoryBalloonDateFormat(m.period), l.showCategoryAxis || (c.categoryBalloonEnabled = !1);\n            l.startTime = n.getTime();\n            l.endTime = b.getTime();\n            l.validateData(!0);\n          }\n\n          c = !1;\n          l.chartCursor && l.chartCursor.panning && (c = !0);\n          c || (l.startTime = void 0, l.endTime = void 0, l.zoomToDates(n, b));\n          0 < f.startDuration && e.animationPlayed && !c ? (l.startDuration = 0, l.animateAgain()) : 0 < f.startDuration && !c && l.animateAgain();\n        }\n\n        e.animationPlayed = !0;\n        f = new Date(b);\n        x && e.updateScrollbar && (x.zoomToDates(a, f), e.skipScrollbarEvent = !0, setTimeout(function () {\n          e.resetSkip.call(e);\n        }, 100));\n        e.updateScrollbar = !0;\n        e.startDate = a;\n        e.endDate = b;\n        p && p.zoom(a, b);\n        if (a.getTime() != e.previousStartDate.getTime() || b.getTime() != e.previousEndDate.getTime()) p = {\n          type: \"zoomed\"\n        }, p.startDate = a, p.endDate = b, p.chart = e, p.period = k, e.fire(p.type, p), e.previousStartDate = new Date(a), e.previousEndDate = new Date(b);\n      }\n\n      e.eventsHidden && e.showHideEvents(!1);\n      e.chartCreated || (k = \"init\", e.fire(k, {\n        type: k,\n        chart: e\n      }));\n      e.chartRendered || (k = \"rendered\", e.fire(k, {\n        type: k,\n        chart: e\n      }), e.chartRendered = !0);\n      k = \"drawn\";\n      e.fire(k, {\n        type: k,\n        chart: e\n      });\n      e.chartCreated = !0;\n      e.animationPlayed = !0;\n    },\n    resetSkip: function () {\n      this.skipScrollbarEvent = !1;\n    },\n    updateGraphs: function () {\n      this.getSelections();\n\n      if (0 < this.dataSets.length) {\n        var a = this.panels;\n        this.comparedGraphs = [];\n        var b;\n\n        for (b = 0; b < a.length; b++) {\n          var c = a[b],\n              e = c.valueAxes,\n              h;\n\n          for (h = 0; h < e.length; h++) {\n            var l = e[h];\n            l.prevLog && (l.logarithmic = l.prevLog);\n            l.recalculateToPercents = \"always\" == c.recalculateToPercents ? !0 : !1;\n          }\n\n          e = this.mainDataSet;\n          h = this.comparedDataSets;\n          l = c.stockGraphs;\n          c.graphs = [];\n          var k, g, m;\n\n          for (k = 0; k < l.length; k++) {\n            var f = l[k],\n                f = d.processObject(f, d.StockGraph, this.theme);\n            l[k] = f;\n            if (!f.title || f.resetTitleOnDataSetChange) f.title = e.title, f.resetTitleOnDataSetChange = !0;\n            f.useDataSetColors && (f.lineColor = e.color, f.fillColors = void 0, f.bulletColor = void 0);\n            var p = !1,\n                r = e.fieldMappings;\n\n            for (g = 0; g < r.length; g++) {\n              m = r[g];\n              var t = f.valueField;\n              t && m.toField == t && (p = !0);\n              (t = f.openField) && m.toField == t && (p = !0);\n              (t = f.closeField) && m.toField == t && (p = !0);\n              (t = f.lowField) && m.toField == t && (p = !0);\n            }\n\n            c.addGraph(f);\n            p || (f.visibleInLegend = !1);\n            t = !1;\n            \"always\" == c.recalculateToPercents && (t = !0);\n            var x = c.stockLegend,\n                y,\n                n,\n                z,\n                A;\n            x && (x = d.processObject(x, d.StockLegend, this.theme), c.stockLegend = x, y = x.valueTextComparing, n = x.valueTextRegular, z = x.periodValueTextComparing, A = x.periodValueTextRegular);\n\n            if (f.comparable) {\n              var B = h.length;\n\n              if (f.valueAxis) {\n                0 < B && f.valueAxis.logarithmic && \"never\" != c.recalculateToPercents && (f.valueAxis.logarithmic = !1, f.valueAxis.prevLog = !0);\n                0 < B && \"whenComparing\" == c.recalculateToPercents && (f.valueAxis.recalculateToPercents = !0);\n                x && f.valueAxis && !0 === f.valueAxis.recalculateToPercents && (t = !0);\n                var D;\n\n                for (D = 0; D < B; D++) {\n                  var C = h[D],\n                      u = f.comparedGraphs[C.id];\n                  u || (u = new d.AmGraph(this.theme), u.id = \"comparedGraph\" + D + \"_\" + k + C.id);\n                  u.periodValue = f.periodValue;\n                  u.dataSet = C;\n                  u.behindColumns = f.behindColumns;\n                  f.comparedGraphs[C.id] = u;\n                  u.seriesIdField = \"amCategoryIdField\";\n                  u.connect = f.connect;\n                  u.showBalloon = f.showBalloon;\n                  var v = f.compareField;\n                  v || (v = f.valueField);\n                  p = !1;\n                  r = C.fieldMappings;\n\n                  for (g = 0; g < r.length; g++) m = r[g], m.toField == v && (p = !0);\n\n                  if (p) {\n                    u.valueField = v;\n                    u.title = C.title;\n                    u.lineColor = C.color;\n                    f.compareGraphLineColor && (u.lineColor = f.compareGraphLineColor);\n                    f.compareGraphType && (u.type = f.compareGraphType);\n                    g = f.compareGraphLineThickness;\n                    isNaN(g) || (u.lineThickness = g);\n                    g = f.compareGraphDashLength;\n                    isNaN(g) || (u.dashLength = g);\n                    g = f.compareGraphLineAlpha;\n                    isNaN(g) || (u.lineAlpha = g);\n                    g = f.compareGraphCornerRadiusTop;\n                    isNaN(g) || (u.cornerRadiusTop = g);\n                    g = f.compareGraphCornerRadiusBottom;\n                    isNaN(g) || (u.cornerRadiusBottom = g);\n                    g = f.compareGraphBalloonColor;\n                    isNaN(g) || (u.balloonColor = g);\n                    g = f.compareGraphBulletColor;\n                    isNaN(g) || (u.bulletColor = g);\n                    if (g = f.compareGraphFillColors) u.fillColors = g;\n                    if (g = f.compareGraphNegativeFillColors) u.negativeFillColors = g;\n                    if (g = f.compareGraphFillAlphas) u.fillAlphas = g;\n                    if (g = f.compareGraphNegativeFillAlphas) u.negativeFillAlphas = g;\n                    if (g = f.compareGraphBullet) u.bullet = g;\n                    if (g = f.compareGraphNumberFormatter) u.numberFormatter = g;\n                    g = f.compareGraphPrecision;\n                    isNaN(g) || (u.precision = g);\n                    if (g = f.compareGraphBalloonText) u.balloonText = g;\n                    g = f.compareGraphBulletSize;\n                    isNaN(g) || (u.bulletSize = g);\n                    g = f.compareGraphBulletAlpha;\n                    isNaN(g) || (u.bulletAlpha = g);\n                    g = f.compareGraphBulletBorderAlpha;\n                    isNaN(g) || (u.bulletBorderAlpha = g);\n                    if (g = f.compareGraphBulletBorderColor) u.bulletBorderColor = g;\n                    g = f.compareGraphBulletBorderThickness;\n                    isNaN(g) || (u.bulletBorderThickness = g);\n                    u.visibleInLegend = f.compareGraphVisibleInLegend;\n                    u.balloonFunction = f.compareGraphBalloonFunction;\n                    u.hideBulletsCount = f.hideBulletsCount;\n                    u.valueAxis = f.valueAxis;\n                    x && (t && y ? (u.legendValueText = y, u.legendPeriodValueText = z) : (n && (u.legendValueText = n), u.legendPeriodValueText = A));\n                    c.showComparedOnTop ? c.graphs.push(u) : c.graphs.unshift(u);\n                    this.comparedGraphs.push({\n                      graph: u,\n                      dataSet: C\n                    });\n                  }\n                }\n              }\n            }\n\n            x && (t && y ? (f.legendValueText = y, f.legendPeriodValueText = z) : (n && (f.legendValueText = n), f.legendPeriodValueText = A));\n          }\n        }\n      }\n    },\n    choosePeriod: function (a, b, c) {\n      var e = this.categoryAxesSettings,\n          h = e.groupToPeriods,\n          l = h[a],\n          k = h[a + 1],\n          g = d.extractPeriod(l),\n          g = d.getPeriodDuration(g.period, g.count),\n          m = b.getTime(),\n          f = c.getTime(),\n          p = e.maxSeries;\n      e.alwaysGroup && l == e.minPeriod && (l = e.groupToPeriods[1], 1 < h.length && (l = h[1]));\n      return (f - m) / g > p && 0 < p && k ? this.choosePeriod(a + 1, b, c) : l;\n    },\n    handleCursorChange: function (a) {\n      var b = a.target,\n          c = a.position,\n          e = a.zooming;\n      a = a.index;\n      var d = this.chartCursors,\n          l;\n\n      for (l = 0; l < d.length; l++) {\n        var k = d[l];\n        k != b && c && (k.isZooming(e), k.previousMousePosition = NaN, k.forceShow = !0, k.initialMouse = b.initialMouse, k.selectionPosX = b.selectionPosX, k.setPosition(c, !1, a));\n      }\n    },\n    getSelections: function () {\n      var a = [],\n          b = this.dataSets,\n          c;\n\n      for (c = 0; c < b.length; c++) {\n        var e = b[c];\n        e.compared && a.push(e);\n      }\n\n      this.comparedDataSets = a;\n      b = this.panels;\n\n      for (c = 0; c < b.length; c++) e = b[c], \"never\" != e.recalculateToPercents && 0 < a.length ? e.hideDrawingIcons(!0) : e.drawingIconsEnabled && e.hideDrawingIcons(!1);\n    },\n    addPanel: function (a) {\n      this.panels.push(a);\n      this.prevPH = void 0;\n      d.removeChart(a);\n      d.addChart(a);\n    },\n    addPanelAt: function (a, b) {\n      this.panels.splice(b, 0, a);\n      this.prevPH = void 0;\n      d.removeChart(a);\n      d.addChart(a);\n    },\n    removePanel: function (a) {\n      var b = this.panels;\n      this.prevPH = void 0;\n      var c;\n\n      for (c = b.length - 1; 0 <= c; c--) if (b[c] == a) {\n        var e = {\n          type: \"panelRemoved\",\n          panel: a,\n          chart: this\n        };\n        this.fire(e.type, e);\n        b.splice(c, 1);\n        a.destroy();\n        a.clear();\n      }\n    },\n    validateData: function () {\n      this.resetDataParsed();\n      this.updateDataSets();\n      this.mainDataSet.compared = !1;\n      this.updateGraphs();\n      this.updateData();\n      var a = this.dataSetSelector;\n      a && a.write(a.div);\n    },\n    resetDataParsed: function () {\n      var a = this.dataSets,\n          b;\n\n      for (b = 0; b < a.length; b++) a[b].dataParsed = !1;\n    },\n    validateNow: function (a) {\n      this.skipDefault = !0;\n      this.chartRendered = !1;\n      this.prevPH = void 0;\n      this.clear(!0);\n      this.initTO && clearTimeout(this.initTO);\n      a && this.resetDataParsed();\n      this.write(this.div);\n    },\n    hideStockEvents: function () {\n      this.showHideEvents(!1);\n      this.eventsHidden = !0;\n    },\n    showStockEvents: function () {\n      this.showHideEvents(!0);\n      this.eventsHidden = !1;\n    },\n    showHideEvents: function (a) {\n      var b = this.panels,\n          c;\n\n      for (c = 0; c < b.length; c++) {\n        var e = b[c].graphs,\n            d;\n\n        for (d = 0; d < e.length; d++) {\n          var l = e[d];\n          !0 === a ? l.showCustomBullets(!0) : l.hideCustomBullets(!0);\n        }\n      }\n    },\n    invalidateSize: function () {\n      var a = this;\n      clearTimeout(a.validateTO);\n      var b = setTimeout(function () {\n        a.validateNow();\n      }, 5);\n      a.validateTO = b;\n    },\n    measure: function () {\n      var a = this.div;\n\n      if (a) {\n        var b = a.offsetWidth,\n            c = a.offsetHeight;\n        a.clientHeight && (b = a.clientWidth, c = a.clientHeight);\n        this.divRealWidth = b;\n        this.divRealHeight = c;\n      }\n    },\n    handleResize: function () {\n      var a = this,\n          b = setTimeout(function () {\n        a.validateSizeReal();\n      }, 150);\n      a.initTO = b;\n    },\n    validateSizeReal: function () {\n      this.previousWidth = this.divRealWidth;\n      this.previousHeight = this.divRealHeight;\n      this.measure();\n      if (this.divRealWidth != this.previousWidth || this.divRealHeight != this.previousHeight) 0 < this.divRealWidth && 0 < this.divRealHeight && this.fire(\"resized\", {\n        type: \"resized\",\n        chart: this\n      }), this.divRealHeight != this.previousHeight && this.validateNow();\n    },\n    clear: function (a) {\n      var b = this.panels,\n          c;\n      if (b) for (c = 0; c < b.length; c++) {\n        var e = b[c];\n        a || (e.cleanChart(), e.destroy());\n        e.clear(a);\n      }\n      (b = this.scrollbarChart) && b.clear();\n      if (b = this.div) b.innerHTML = \"\";\n      a || (this.div = null, d.deleteObject(this));\n    }\n  });\n  d.StockEvent = d.Class({\n    construct: function () {}\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.DataSet = d.Class({\n    construct: function () {\n      this.cname = \"DataSet\";\n      this.fieldMappings = [];\n      this.dataProvider = [];\n      this.agregatedDataProviders = [];\n      this.stockEvents = [];\n      this.compared = !1;\n      this.showInCompare = this.showInSelect = !0;\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.PeriodSelector = d.Class({\n    construct: function (a) {\n      this.cname = \"PeriodSelector\";\n      this.theme = a;\n      this.createEvents(\"changed\");\n      this.inputFieldsEnabled = !0;\n      this.position = \"bottom\";\n      this.width = 180;\n      this.fromText = \"From: \";\n      this.toText = \"to: \";\n      this.periodsText = \"Zoom: \";\n      this.periods = [];\n      this.inputFieldWidth = 100;\n      this.dateFormat = \"DD-MM-YYYY\";\n      this.hideOutOfScopePeriods = !0;\n      d.applyTheme(this, a, this.cname);\n    },\n    zoom: function (a, b) {\n      var c = this.chart;\n      this.inputFieldsEnabled && (this.startDateField.value = d.formatDate(a, this.dateFormat, c), this.endDateField.value = d.formatDate(b, this.dateFormat, c));\n      this.markButtonAsSelected();\n    },\n    write: function (a) {\n      var b = this,\n          c = b.chart.classNamePrefix;\n      a.className = \"amChartsPeriodSelector \" + c + \"-period-selector-div\";\n      var e = b.width,\n          h = b.position;\n      b.width = void 0;\n      b.position = void 0;\n      d.applyStyles(a.style, b);\n      b.width = e;\n      b.position = h;\n      b.div = a;\n      a.innerHTML = \"\";\n      e = b.theme;\n      h = b.position;\n      h = \"top\" == h || \"bottom\" == h ? !1 : !0;\n      b.vertical = h;\n      var l = 0,\n          k = 0;\n\n      if (b.inputFieldsEnabled) {\n        var g = document.createElement(\"div\");\n        a.appendChild(g);\n        var m = document.createTextNode(d.lang.fromText || b.fromText);\n        g.appendChild(m);\n        h ? d.addBr(g) : (g.style.styleFloat = \"left\", g.style.display = \"inline\");\n        var f = document.createElement(\"input\");\n        f.className = \"amChartsInputField \" + c + \"-start-date-input\";\n        e && d.applyStyles(f.style, e.PeriodInputField);\n        f.style.textAlign = \"center\";\n\n        f.onblur = function (a) {\n          b.handleCalChange(a);\n        };\n\n        d.isNN && f.addEventListener(\"keypress\", function (a) {\n          b.handleCalendarChange.call(b, a);\n        }, !0);\n        d.isIE && f.attachEvent(\"onkeypress\", function (a) {\n          b.handleCalendarChange.call(b, a);\n        });\n        g.appendChild(f);\n        b.startDateField = f;\n        if (h) m = b.width - 6 + \"px\", d.addBr(g);else {\n          var m = b.inputFieldWidth + \"px\",\n              p = document.createTextNode(\" \");\n          g.appendChild(p);\n        }\n        f.style.width = m;\n        f = document.createTextNode(d.lang.toText || b.toText);\n        g.appendChild(f);\n        h && d.addBr(g);\n        f = document.createElement(\"input\");\n        f.className = \"amChartsInputField \" + c + \"-end-date-input\";\n        e && d.applyStyles(f.style, e.PeriodInputField);\n        f.style.textAlign = \"center\";\n\n        f.onblur = function () {\n          b.handleCalChange();\n        };\n\n        d.isNN && f.addEventListener(\"keypress\", function (a) {\n          b.handleCalendarChange.call(b, a);\n        }, !0);\n        d.isIE && f.attachEvent(\"onkeypress\", function (a) {\n          b.handleCalendarChange.call(b, a);\n        });\n        g.appendChild(f);\n        b.endDateField = f;\n        h ? d.addBr(g) : l = f.offsetHeight + 2;\n        m && (f.style.width = m);\n      }\n\n      g = b.periods;\n\n      if (d.ifArray(g)) {\n        m = document.createElement(\"div\");\n        h || (m.style.cssFloat = \"right\", m.style.styleFloat = \"right\", m.style.display = \"inline\");\n        a.appendChild(m);\n        h && d.addBr(m);\n        a = document.createTextNode(d.lang.periodsText || b.periodsText);\n        m.appendChild(a);\n        b.periodContainer = m;\n        var r;\n\n        for (a = 0; a < g.length; a++) f = g[a], r = document.createElement(\"input\"), r.type = \"button\", r.value = f.label, r.period = f.period, r.count = f.count, r.periodObj = f, r.className = \"amChartsButton \" + c + \"-period-input\", e && d.applyStyles(r.style, e.PeriodButton), h && (r.style.width = b.width - 1 + \"px\"), r.style.boxSizing = \"border-box\", m.appendChild(r), b.addEventListeners(r), f.button = r;\n\n        !h && r && (k = r.offsetHeight);\n        b.offsetHeight = Math.max(l, k);\n      }\n    },\n    addEventListeners: function (a) {\n      var b = this;\n      d.isNN && a.addEventListener(\"click\", function (a) {\n        b.handlePeriodChange.call(b, a);\n      }, !0);\n      d.isIE && a.attachEvent(\"onclick\", function (a) {\n        b.handlePeriodChange.call(b, a);\n      });\n    },\n    getPeriodDates: function () {\n      var a = this.periods,\n          b;\n\n      for (b = 0; b < a.length; b++) this.selectPeriodButton(a[b], !0);\n    },\n    handleCalendarChange: function (a) {\n      13 == a.keyCode && this.handleCalChange(a);\n    },\n    handleCalChange: function (a) {\n      var b = this.dateFormat,\n          c = d.stringToDate(this.startDateField.value, b),\n          b = this.chart.getLastDate(d.stringToDate(this.endDateField.value, b));\n\n      try {\n        this.startDateField.blur(), this.endDateField.blur();\n      } catch (e) {}\n\n      if (c && b) {\n        var h = {\n          type: \"changed\"\n        };\n        h.startDate = c;\n        h.endDate = b;\n        h.chart = this.chart;\n        h.event = a;\n        this.fire(h.type, h);\n      }\n    },\n    handlePeriodChange: function (a) {\n      this.selectPeriodButton((a.srcElement ? a.srcElement : a.target).periodObj, !1, a);\n    },\n    setRanges: function (a, b) {\n      this.firstDate = a;\n      this.lastDate = b;\n      this.getPeriodDates();\n    },\n    selectPeriodButton: function (a, b, c) {\n      var e = a.button,\n          h = e.count,\n          l = e.period,\n          k = this.chart,\n          g,\n          m,\n          f = this.firstDate,\n          p = this.lastDate,\n          r,\n          t = this.theme;\n      f && p && (\"MAX\" == l ? (g = f, m = p) : \"YTD\" == l ? (g = new Date(), g.setMonth(0, 1), g.setHours(0, 0, 0, 0), 0 === h && g.setDate(g.getDate() - 1), m = this.lastDate) : \"YYYY\" == l || \"MM\" == l ? this.selectFromStart ? (g = f, m = new Date(f), m.setMonth(m.getMonth() + h)) : (g = new Date(p), d.changeDate(g, l, h, !1), g.setDate(g.getDate() - 1), m = p, g.setTime(g.getTime() + 1)) : (r = d.getPeriodDuration(l, h), this.selectFromStart ? (g = f, m = new Date(f.getTime() + r - 1)) : (g = new Date(p.getTime() - r + 1), m = p)), a.startTime = g.getTime(), this.hideOutOfScopePeriods && (b && a.startTime < f.getTime() ? e.style.display = \"none\" : e.style.display = \"inline\"), g.getTime() > p.getTime() && (r = d.getPeriodDuration(\"DD\", 1), g = new Date(p.getTime() - r)), g.getTime() < f.getTime() && (g = f), \"YTD\" == l && (a.startTime = g.getTime()), a.endTime = m.getTime(), b || (this.skipMark = !0, this.unselectButtons(), e.className = \"amChartsButtonSelected \" + k.classNamePrefix + \"-period-input-selected\", t && d.applyStyles(e.style, t.PeriodButtonSelected), a = {\n        type: \"changed\"\n      }, a.startDate = g, a.endDate = m, a.predefinedPeriod = l, a.chart = this.chart, a.count = h, a.event = c, this.fire(a.type, a)));\n    },\n    markButtonAsSelected: function () {\n      if (!this.skipMark) {\n        var a = this.chart,\n            b = this.periods,\n            c = a.startDate.getTime(),\n            e = a.endDate.getTime(),\n            h = this.lastDate.getTime();\n        e > h && (e = h);\n        h = this.theme;\n        this.unselectButtons();\n        var l;\n\n        for (l = b.length - 1; 0 <= l; l--) {\n          var k = b[l],\n              g = k.button;\n          k.startTime && k.endTime && c == k.startTime && e == k.endTime && (this.unselectButtons(), g.className = \"amChartsButtonSelected \" + a.classNamePrefix + \"-period-input-selected\", h && d.applyStyles(g.style, h.PeriodButtonSelected));\n        }\n      }\n\n      this.skipMark = !1;\n    },\n    unselectButtons: function () {\n      var a = this.chart,\n          b = this.periods,\n          c,\n          e = this.theme;\n\n      for (c = b.length - 1; 0 <= c; c--) {\n        var h = b[c].button;\n        h.className = \"amChartsButton \" + a.classNamePrefix + \"-period-input\";\n        e && d.applyStyles(h.style, e.PeriodButton);\n      }\n    },\n    setDefaultPeriod: function () {\n      var a = this.periods,\n          b;\n\n      for (b = 0; b < a.length; b++) {\n        var c = a[b];\n        c.selected && this.selectPeriodButton(c);\n      }\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.StockGraph = d.Class({\n    inherits: d.AmGraph,\n    construct: function (a) {\n      d.StockGraph.base.construct.call(this, a);\n      this.cname = \"StockGraph\";\n      this.useDataSetColors = !0;\n      this.periodValue = \"Close\";\n      this.compareGraphType = \"line\";\n      this.compareGraphVisibleInLegend = !0;\n      this.comparable = this.resetTitleOnDataSetChange = !1;\n      this.comparedGraphs = {};\n      this.showEventsOnComparedGraphs = !1;\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.StockPanel = d.Class({\n    inherits: d.AmSerialChart,\n    construct: function (a) {\n      d.StockPanel.base.construct.call(this, a);\n      this.cname = \"StockPanel\";\n      this.theme = a;\n      this.showCategoryAxis = this.showComparedOnTop = !0;\n      this.recalculateToPercents = \"whenComparing\";\n      this.panelHeaderPaddingBottom = this.panelHeaderPaddingLeft = this.panelHeaderPaddingRight = this.panelHeaderPaddingTop = 0;\n      this.trendLineAlpha = 1;\n      this.trendLineColor = \"#00CC00\";\n      this.trendLineColorHover = \"#CC0000\";\n      this.trendLineThickness = 2;\n      this.trendLineDashLength = 0;\n      this.stockGraphs = [];\n      this.drawingIconsEnabled = !1;\n      this.iconSize = 38;\n      this.autoMargins = this.allowTurningOff = this.eraseAll = this.erasingEnabled = this.drawingEnabled = !1;\n      d.applyTheme(this, a, this.cname);\n    },\n    initChart: function (a) {\n      d.StockPanel.base.initChart.call(this, a);\n      this.drawingIconsEnabled && this.createDrawIcons();\n      (a = this.chartCursor) && this.listenTo(a, \"draw\", this.handleDraw);\n    },\n    addStockGraph: function (a) {\n      this.stockGraphs.push(a);\n      return a;\n    },\n    handleCursorZoom: function (a) {\n      this.chartCursor && this.chartCursor.pan && d.StockPanel.base.handleCursorZoom.call(this, a);\n    },\n    removeStockGraph: function (a) {\n      var b = this.stockGraphs,\n          c;\n\n      for (c = b.length - 1; 0 <= c; c--) b[c] == a && b.splice(c, 1);\n    },\n    createDrawIcons: function () {\n      var a = this,\n          b = a.iconSize,\n          c = a.container,\n          e = a.pathToImages,\n          h = a.realWidth - 2 * b - 1 - a.marginRight,\n          l = d.rect(c, b, b, \"#000\", .005),\n          k = d.rect(c, b, b, \"#000\", .005);\n      k.translate(b + 1, 0);\n      var g = c.image(e + \"pencilIcon.png\", 0, 0, b, b);\n      d.setCN(a, g, \"pencil\");\n      a.pencilButton = g;\n      k.setAttr(\"cursor\", \"pointer\");\n      l.setAttr(\"cursor\", \"pointer\");\n      l.mouseup(function () {\n        a.handlePencilClick();\n      });\n      var m = c.image(e + \"pencilIconH.png\", 0, 0, b, b);\n      d.setCN(a, m, \"pencil-pushed\");\n      a.pencilButtonPushed = m;\n      a.drawingEnabled || m.hide();\n      var f = c.image(e + \"eraserIcon.png\", b + 1, 0, b, b);\n      d.setCN(a, f, \"eraser\");\n      a.eraserButton = f;\n      k.mouseup(function () {\n        a.handleEraserClick();\n      });\n      l.touchend && (l.touchend(function () {\n        a.handlePencilClick();\n      }), k.touchend(function () {\n        a.handleEraserClick();\n      }));\n      b = c.image(e + \"eraserIconH.png\", b + 1, 0, b, b);\n      d.setCN(a, b, \"eraser-pushed\");\n      a.eraserButtonPushed = b;\n      a.erasingEnabled || b.hide();\n      c = c.set([g, m, f, b, l, k]);\n      d.setCN(a, c, \"drawing-tools\");\n      c.translate(h, 1);\n      this.hideIcons && c.hide();\n    },\n    handlePencilClick: function () {\n      var a = !this.drawingEnabled;\n      this.disableDrawing(!a);\n      this.erasingEnabled = !1;\n      var b = this.eraserButtonPushed;\n      b && b.hide();\n      b = this.pencilButtonPushed;\n      a ? b && b.show() : (b && b.hide(), this.setMouseCursor(\"auto\"));\n    },\n    disableDrawing: function (a) {\n      this.drawingEnabled = !a;\n      var b = this.chartCursor;\n      this.stockChart.enableCursors(a);\n      b && b.enableDrawing(!a);\n    },\n    handleEraserClick: function () {\n      this.disableDrawing(!0);\n      var a = this.pencilButtonPushed;\n      a && a.hide();\n      a = this.eraserButtonPushed;\n\n      if (this.eraseAll) {\n        var a = this.trendLines,\n            b;\n\n        for (b = a.length - 1; 0 <= b; b--) {\n          var c = a[b];\n          c.isProtected || this.removeTrendLine(c);\n        }\n\n        this.validateNow();\n      } else (this.erasingEnabled = b = !this.erasingEnabled) ? (a && a.show(), this.setTrendColorHover(this.trendLineColorHover), this.setMouseCursor(\"auto\")) : (a && a.hide(), this.setTrendColorHover());\n    },\n    setTrendColorHover: function (a) {\n      var b = this.trendLines,\n          c;\n\n      for (c = b.length - 1; 0 <= c; c--) {\n        var e = b[c];\n        e.isProtected || (e.rollOverColor = a);\n      }\n    },\n    handleDraw: function (a) {\n      var b = this.drawOnAxis;\n      d.isString(b) && (b = this.getValueAxisById(b));\n      b || (b = this.valueAxes[0]);\n      this.drawOnAxis = b;\n      var c = this.categoryAxis,\n          e = a.initialX,\n          h = a.finalX,\n          l = a.initialY;\n      a = a.finalY;\n      var k = new d.TrendLine(this.theme);\n      k.initialDate = c.coordinateToDate(e);\n      k.finalDate = c.coordinateToDate(h);\n      k.initialValue = b.coordinateToValue(l);\n      k.finalValue = b.coordinateToValue(a);\n      k.lineAlpha = this.trendLineAlpha;\n      k.lineColor = this.trendLineColor;\n      k.lineThickness = this.trendLineThickness;\n      k.dashLength = this.trendLineDashLength;\n      k.valueAxis = b;\n      k.categoryAxis = c;\n      this.addTrendLine(k);\n      this.listenTo(k, \"click\", this.handleTrendClick);\n      this.validateNow();\n    },\n    hideDrawingIcons: function (a) {\n      (this.hideIcons = a) && this.disableDrawing(a);\n    },\n    handleTrendClick: function (a) {\n      this.erasingEnabled && (a = a.trendLine, this.eraseAll || a.isProtected || this.removeTrendLine(a), this.validateNow());\n    },\n    handleWheelReal: function (a, b) {\n      var c = this.scrollbarChart;\n\n      if (!this.wheelBusy && c) {\n        var e = 1;\n        b && (e = -1);\n        var c = c.chartScrollbar,\n            d = this.categoryAxis.minDuration();\n        0 > a ? (e = this.startTime + e * d, d = this.endTime + 1 * d) : (e = this.startTime - e * d, d = this.endTime - 1 * d);\n        e < this.firstTime && (e = this.firstTime);\n        d > this.lastTime && (d = this.lastTime);\n        e < d && c.timeZoom(e, d, !0);\n      }\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.CategoryAxesSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"CategoryAxesSettings\";\n      this.minPeriod = \"DD\";\n      this.equalSpacing = !1;\n      this.axisHeight = 28;\n      this.tickLength = this.axisAlpha = 0;\n      this.gridCount = 10;\n      this.maxSeries = 150;\n      this.groupToPeriods = \"ss 10ss 30ss mm 10mm 30mm hh DD WW MM YYYY\".split(\" \");\n      this.markPeriodChange = this.autoGridCount = !0;\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.ChartCursorSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"ChartCursorSettings\";\n      this.enabled = !0;\n      this.bulletsEnabled = this.valueBalloonsEnabled = !1;\n      this.graphBulletSize = 1;\n      this.categoryBalloonDateFormats = [{\n        period: \"YYYY\",\n        format: \"YYYY\"\n      }, {\n        period: \"MM\",\n        format: \"MMM, YYYY\"\n      }, {\n        period: \"WW\",\n        format: \"MMM DD, YYYY\"\n      }, {\n        period: \"DD\",\n        format: \"MMM DD, YYYY\"\n      }, {\n        period: \"hh\",\n        format: \"JJ:NN\"\n      }, {\n        period: \"mm\",\n        format: \"JJ:NN\"\n      }, {\n        period: \"ss\",\n        format: \"JJ:NN:SS\"\n      }, {\n        period: \"fff\",\n        format: \"JJ:NN:SS\"\n      }];\n      d.applyTheme(this, a, this.cname);\n    },\n    categoryBalloonDateFormat: function (a) {\n      var b = this.categoryBalloonDateFormats,\n          c,\n          e;\n\n      for (e = 0; e < b.length; e++) b[e].period == a && (c = b[e].format);\n\n      return c;\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.ChartScrollbarSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"ChartScrollbarSettings\";\n      this.height = 40;\n      this.enabled = !0;\n      this.color = \"#FFFFFF\";\n      this.updateOnReleaseOnly = this.autoGridCount = !0;\n      this.hideResizeGrips = !1;\n      this.position = \"bottom\";\n      this.minDistance = 1;\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.LegendSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"LegendSettings\";\n      this.marginBottom = this.marginTop = 0;\n      this.usePositiveNegativeOnPercentsOnly = !0;\n      this.positiveValueColor = \"#00CC00\";\n      this.negativeValueColor = \"#CC0000\";\n      this.autoMargins = this.equalWidths = this.textClickEnabled = !1;\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.PanelsSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"PanelsSettings\";\n      this.marginBottom = this.marginTop = this.marginRight = this.marginLeft = 0;\n      this.backgroundColor = \"#FFFFFF\";\n      this.backgroundAlpha = 0;\n      this.panelSpacing = 8;\n      this.panEventsEnabled = !0;\n      this.creditsPosition = \"top-right\";\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.StockEventsSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"StockEventsSettings\";\n      this.type = \"sign\";\n      this.backgroundAlpha = 1;\n      this.backgroundColor = \"#DADADA\";\n      this.borderAlpha = 1;\n      this.borderColor = \"#888888\";\n      this.balloonColor = this.rollOverColor = \"#CC0000\";\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.ValueAxesSettings = d.Class({\n    construct: function (a) {\n      this.cname = \"ValueAxesSettings\";\n      this.tickLength = 0;\n      this.showFirstLabel = this.autoGridCount = this.inside = !0;\n      this.showLastLabel = !1;\n      this.axisAlpha = 0;\n      d.applyTheme(this, a, this.cname);\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n\n  d.getItemIndex = function (a, b) {\n    var c = -1,\n        e;\n\n    for (e = 0; e < b.length; e++) a == b[e] && (c = e);\n\n    return c;\n  };\n\n  d.addBr = function (a) {\n    a.appendChild(document.createElement(\"br\"));\n  };\n\n  d.applyStyles = function (a, b) {\n    if (b && a) for (var c in a) {\n      var e = c,\n          d = b[e];\n      if (void 0 !== d) try {\n        a[e] = d;\n      } catch (l) {}\n    }\n  };\n\n  d.parseStockData = function (a, b, c, e, h) {\n    var l = {},\n        k = a.dataProvider,\n        g = a.categoryField;\n\n    if (g) {\n      var m = d.getItemIndex(b, c),\n          f = c.length,\n          p,\n          r = k.length,\n          t,\n          x = {};\n\n      for (p = m; p < f; p++) t = c[p], l[t] = [];\n\n      var y = {},\n          n = a.fieldMappings,\n          z = n.length;\n\n      for (p = 0; p < r; p++) {\n        var A = k[p],\n            B = A[g],\n            D = d.getDate(B, h, b),\n            D = B instanceof Date ? d.newDate(B, b) : h ? d.stringToDate(B, h) : new Date(B),\n            B = D.getTime(),\n            C = {};\n\n        for (t = 0; t < z; t++) C[n[t].toField] = A[n[t].fromField];\n\n        var u;\n\n        for (u = m; u < f; u++) {\n          t = c[u];\n          var v = d.extractPeriod(t),\n              E = v.period,\n              G = v.count,\n              w,\n              q;\n\n          if (u == m || B >= x[t] || !x[t]) {\n            y[t] = {};\n            y[t].amCategoryIdField = String(d.resetDateToMin(D, E, G, e).getTime());\n            var F;\n\n            for (F = 0; F < z; F++) v = n[F].toField, w = y[t], q = Number(C[v]), w[v + \"Count\"] = 0, w[v + \"Sum\"] = 0, isNaN(q) || (w[v + \"Open\"] = q, w[v + \"Sum\"] = q, w[v + \"High\"] = q, w[v + \"Low\"] = q, w[v + \"Close\"] = q, w[v + \"Count\"] = 1, w[v + \"Average\"] = q);\n\n            w.dataContext = A;\n            l[t].push(y[t]);\n            u > m && (v = d.newDate(D, b), v = d.changeDate(v, E, G, !0), v = d.resetDateToMin(v, E, G, e), x[t] = v.getTime());\n            if (u == m) for (var H in A) A.hasOwnProperty(H) && (y[t][H] = A[H]);\n            y[t][g] = d.newDate(D, b);\n          } else for (E = 0; E < z; E++) v = n[E].toField, w = y[t], p == r - 1 && (w[g] = d.newDate(D, b)), q = Number(C[v]), isNaN(q) || (isNaN(w[v + \"Low\"]) && (w[v + \"Low\"] = q), q < w[v + \"Low\"] && (w[v + \"Low\"] = q), isNaN(w[v + \"High\"]) && (w[v + \"High\"] = q), q > w[v + \"High\"] && (w[v + \"High\"] = q), w[v + \"Close\"] = q, G = d.getDecimals(w[v + \"Sum\"]), F = d.getDecimals(q), w[v + \"Sum\"] += q, w[v + \"Sum\"] = d.roundTo(w[v + \"Sum\"], Math.max(G, F)), w[v + \"Count\"]++, w[v + \"Average\"] = w[v + \"Sum\"] / w[v + \"Count\"]);\n        }\n      }\n    }\n\n    a.agregatedDataProviders = l;\n  };\n\n  d.parseEvents = function (a, b, c, e, h, l) {\n    var k = a.stockEvents,\n        g = a.agregatedDataProviders,\n        m = b.length,\n        f,\n        p,\n        r,\n        t,\n        x,\n        y,\n        n,\n        z,\n        A;\n\n    for (f = 0; f < m; f++) {\n      y = b[f];\n      x = y.graphs;\n      r = x.length;\n      var B;\n\n      for (p = 0; p < r; p++) t = x[p], t.customBulletField = \"amCustomBullet\" + t.id + \"_\" + y.id, t.bulletConfigField = \"amCustomBulletConfig\" + t.id + \"_\" + y.id;\n\n      for (A = 0; A < k.length; A++) if (n = k[A], B = n.graph, d.isString(B) && (B = d.getObjById(x, B))) n.graph = B;\n    }\n\n    for (var D in g) if (g.hasOwnProperty(D)) {\n      B = g[D];\n      var C = d.extractPeriod(D),\n          u = B.length,\n          v;\n\n      for (v = 0; v < u; v++) {\n        var E = B[v];\n        f = E[a.categoryField];\n        z = f instanceof Date;\n        l && !z && (f = d.stringToDate(f, l));\n        var G = f.getTime();\n        x = C.period;\n        A = C.count;\n        var w;\n        w = \"fff\" == x ? f.getTime() + 1 : d.resetDateToMin(d.changeDate(new Date(f), C.period, C.count), x, A, e).getTime();\n\n        for (f = 0; f < m; f++) for (y = b[f], x = y.graphs, r = x.length, p = 0; p < r; p++) {\n          t = x[p];\n          var q = {};\n          q.eventDispatcher = h;\n          q.eventObjects = [];\n          q.letters = [];\n          q.descriptions = [];\n          q.shapes = [];\n          q.backgroundColors = [];\n          q.backgroundAlphas = [];\n          q.borderColors = [];\n          q.borderAlphas = [];\n          q.colors = [];\n          q.rollOverColors = [];\n          q.showOnAxis = [];\n          q.values = [];\n          q.showAts = [];\n          q.fontSizes = [];\n\n          for (A = 0; A < k.length; A++) {\n            n = k[A];\n            z = n.date instanceof Date;\n            l && !z && (n.date = d.stringToDate(n.date, l));\n            z = n.date.getTime();\n            var F = !1;\n            n.graph && (n.graph.showEventsOnComparedGraphs && n.graph.comparedGraphs[a.id] && (F = !0), (t == n.graph || F) && z >= G && z < w && (q.eventObjects.push(n), q.letters.push(n.text), q.descriptions.push(n.description), n.type ? q.shapes.push(n.type) : q.shapes.push(c.type), void 0 !== n.backgroundColor ? q.backgroundColors.push(n.backgroundColor) : q.backgroundColors.push(c.backgroundColor), isNaN(n.backgroundAlpha) ? q.backgroundAlphas.push(c.backgroundAlpha) : q.backgroundAlphas.push(n.backgroundAlpha), isNaN(n.borderAlpha) ? q.borderAlphas.push(c.borderAlpha) : q.borderAlphas.push(n.borderAlpha), void 0 !== n.borderColor ? q.borderColors.push(n.borderColor) : q.borderColors.push(c.borderColor), void 0 !== n.rollOverColor ? q.rollOverColors.push(n.rollOverColor) : q.rollOverColors.push(c.rollOverColor), void 0 !== n.showAt ? q.showAts.push(n.showAt) : q.showAts.push(c.showAt), void 0 !== n.fontSize && q.fontSizes.push(n.fontSize), q.colors.push(n.color), q.values.push(n.value), !n.panel && n.graph && (n.panel = n.graph.chart), q.showOnAxis.push(n.showOnAxis), q.date = new Date(n.date)));\n            0 < q.shapes.length && (n = \"amCustomBullet\" + t.id + \"_\" + y.id, z = \"amCustomBulletConfig\" + t.id + \"_\" + y.id, E[n] = d.StackedBullet, E[z] = q);\n          }\n        }\n      }\n    }\n  };\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.StockLegend = d.Class({\n    inherits: d.AmLegend,\n    construct: function (a) {\n      d.StockLegend.base.construct.call(this, a);\n      this.cname = \"StockLegend\";\n      this.valueTextComparing = \"[[percents.value]]%\";\n      this.valueTextRegular = \"[[value]]\";\n      d.applyTheme(this, a, this.cname);\n    },\n    drawLegend: function () {\n      var a = this;\n      d.StockLegend.base.drawLegend.call(a);\n      var b = a.chart;\n\n      if (b.allowTurningOff) {\n        var c = a.container,\n            e = c.image(b.pathToImages + \"xIcon.png\", b.realWidth - 19, 3, 19, 19),\n            b = c.image(b.pathToImages + \"xIconH.png\", b.realWidth - 19, 3, 19, 19);\n        b.hide();\n        a.xButtonHover = b;\n        e.mouseup(function () {\n          a.handleXClick();\n        }).mouseover(function () {\n          a.handleXOver();\n        });\n        b.mouseup(function () {\n          a.handleXClick();\n        }).mouseout(function () {\n          a.handleXOut();\n        });\n      }\n    },\n    handleXOver: function () {\n      this.xButtonHover.show();\n    },\n    handleXOut: function () {\n      this.xButtonHover.hide();\n    },\n    handleXClick: function () {\n      var a = this.chart,\n          b = a.stockChart;\n      b.removePanel(a);\n      b.validateNow();\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.DataSetSelector = d.Class({\n    construct: function (a) {\n      this.cname = \"DataSetSelector\";\n      this.theme = a;\n      this.createEvents(\"dataSetSelected\", \"dataSetCompared\", \"dataSetUncompared\");\n      this.position = \"left\";\n      this.selectText = \"Select:\";\n      this.comboBoxSelectText = \"Select...\";\n      this.compareText = \"Compare to:\";\n      this.width = 180;\n      this.dataProvider = [];\n      this.listHeight = 150;\n      this.listCheckBoxSize = 14;\n      this.rollOverBackgroundColor = \"#b2e1ff\";\n      this.selectedBackgroundColor = \"#7fceff\";\n      d.applyTheme(this, a, this.cname);\n    },\n    write: function (a) {\n      var b = this,\n          c,\n          e = b.theme,\n          h = b.chart;\n      a.className = \"amChartsDataSetSelector \" + h.classNamePrefix + \"-data-set-selector-div\";\n      var l = b.width;\n      c = b.position;\n      b.width = void 0;\n      b.position = void 0;\n      d.applyStyles(a.style, b);\n      b.div = a;\n      b.width = l;\n      b.position = c;\n      a.innerHTML = \"\";\n      var l = b.position,\n          k;\n      k = \"top\" == l || \"bottom\" == l ? !1 : !0;\n      b.vertical = k;\n      var g;\n      k && (g = b.width + \"px\");\n      var l = b.dataProvider,\n          m,\n          f;\n\n      if (1 < b.countDataSets(\"showInSelect\")) {\n        c = document.createTextNode(d.lang.selectText || b.selectText);\n        a.appendChild(c);\n        k && d.addBr(a);\n        var p = document.createElement(\"select\");\n        g && (p.style.width = g);\n        b.selectCB = p;\n        e && d.applyStyles(p.style, e.DataSetSelect);\n        p.className = h.classNamePrefix + \"-data-set-select\";\n        a.appendChild(p);\n        d.isNN && p.addEventListener(\"change\", function (a) {\n          b.handleDataSetChange.call(b, a);\n        }, !0);\n        d.isIE && p.attachEvent(\"onchange\", function (a) {\n          b.handleDataSetChange.call(b, a);\n        });\n\n        for (c = 0; c < l.length; c++) if (m = l[c], !0 === m.showInSelect) {\n          f = document.createElement(\"option\");\n          f.className = h.classNamePrefix + \"-data-set-select-option\";\n          f.text = m.title;\n          f.value = c;\n          m == b.chart.mainDataSet && (f.selected = !0);\n\n          try {\n            p.add(f, null);\n          } catch (r) {\n            p.add(f);\n          }\n        }\n\n        b.offsetHeight = p.offsetHeight;\n      }\n\n      if (0 < b.countDataSets(\"showInCompare\") && 1 < l.length) if (k ? (d.addBr(a), d.addBr(a)) : (c = document.createTextNode(\" \"), a.appendChild(c)), c = document.createTextNode(d.lang.compareText || b.compareText), a.appendChild(c), f = b.listCheckBoxSize, k) {\n        d.addBr(a);\n        g = document.createElement(\"div\");\n        a.appendChild(g);\n        g.className = \"amChartsCompareList \" + h.classNamePrefix + \"-compare-div\";\n        e && d.applyStyles(g.style, e.DataSetCompareList);\n        g.style.overflow = \"auto\";\n        g.style.overflowX = \"hidden\";\n        g.style.width = b.width - 2 + \"px\";\n        g.style.maxHeight = b.listHeight + \"px\";\n\n        for (c = 0; c < l.length; c++) m = l[c], !0 === m.showInCompare && m != b.chart.mainDataSet && (e = document.createElement(\"div\"), e.style.padding = \"4px\", e.style.position = \"relative\", e.name = \"amCBContainer\", e.className = h.classNamePrefix + \"-compare-item-div\", e.dataSet = m, e.style.height = f + \"px\", m.compared && (e.style.backgroundColor = b.selectedBackgroundColor), g.appendChild(e), k = document.createElement(\"div\"), k.style.width = f + \"px\", k.style.height = f + \"px\", k.style.position = \"absolute\", k.style.backgroundColor = m.color, e.appendChild(k), k = document.createElement(\"div\"), k.style.width = \"100%\", k.style.position = \"absolute\", k.style.left = f + 10 + \"px\", e.appendChild(k), m = document.createTextNode(m.title), k.style.whiteSpace = \"nowrap\", k.style.cursor = \"default\", k.appendChild(m), b.addEventListeners(e));\n\n        d.addBr(a);\n        d.addBr(a);\n      } else {\n        h = document.createElement(\"select\");\n        b.compareCB = h;\n        g && (h.style.width = g);\n        a.appendChild(h);\n        d.isNN && h.addEventListener(\"change\", function (a) {\n          b.handleCBSelect.call(b, a);\n        }, !0);\n        d.isIE && h.attachEvent(\"onchange\", function (a) {\n          b.handleCBSelect.call(b, a);\n        });\n        f = document.createElement(\"option\");\n        f.text = d.lang.comboBoxSelectText || b.comboBoxSelectText;\n\n        try {\n          h.add(f, null);\n        } catch (t) {\n          h.add(f);\n        }\n\n        for (c = 0; c < l.length; c++) if (m = l[c], !0 === m.showInCompare && m != b.chart.mainDataSet) {\n          f = document.createElement(\"option\");\n          f.text = m.title;\n          f.value = c;\n          m.compared && (f.selected = !0);\n\n          try {\n            h.add(f, null);\n          } catch (x) {\n            h.add(f);\n          }\n        }\n\n        b.offsetHeight = h.offsetHeight;\n      }\n    },\n    addEventListeners: function (a) {\n      var b = this;\n      d.isNN && (a.addEventListener(\"mouseover\", function (a) {\n        b.handleRollOver.call(b, a);\n      }, !0), a.addEventListener(\"mouseout\", function (a) {\n        b.handleRollOut.call(b, a);\n      }, !0), a.addEventListener(\"click\", function (a) {\n        b.handleClick.call(b, a);\n      }, !0));\n      d.isIE && (a.attachEvent(\"onmouseout\", function (a) {\n        b.handleRollOut.call(b, a);\n      }), a.attachEvent(\"onmouseover\", function (a) {\n        b.handleRollOver.call(b, a);\n      }), a.attachEvent(\"onclick\", function (a) {\n        b.handleClick.call(b, a);\n      }));\n    },\n    handleDataSetChange: function () {\n      var a = this.selectCB,\n          a = this.dataProvider[a.options[a.selectedIndex].value],\n          b = this.chart;\n      b.mainDataSet = a;\n      b.zoomOutOnDataSetChange && (b.startDate = void 0, b.endDate = void 0);\n      b.validateData();\n      a = {\n        type: \"dataSetSelected\",\n        dataSet: a,\n        chart: this.chart\n      };\n      this.fire(a.type, a);\n    },\n    handleRollOver: function (a) {\n      a = this.getRealDiv(a);\n      a.dataSet.compared || (a.style.backgroundColor = this.rollOverBackgroundColor);\n    },\n    handleRollOut: function (a) {\n      a = this.getRealDiv(a);\n      a.dataSet.compared || (a.style.removeProperty && a.style.removeProperty(\"background-color\"), a.style.removeAttribute && a.style.removeAttribute(\"backgroundColor\"));\n    },\n    handleCBSelect: function (a) {\n      var b = this.compareCB,\n          c = this.dataProvider,\n          e,\n          d;\n\n      for (e = 0; e < c.length; e++) d = c[e], d.compared && (a = {\n        type: \"dataSetUncompared\",\n        dataSet: d\n      }), d.compared = !1;\n\n      c = b.selectedIndex;\n      0 < c && (d = this.dataProvider[b.options[c].value], d.compared || (a = {\n        type: \"dataSetCompared\",\n        dataSet: d\n      }), d.compared = !0);\n      b = this.chart;\n      b.validateData();\n      a.chart = b;\n      this.fire(a.type, a);\n    },\n    handleClick: function (a) {\n      a = this.getRealDiv(a).dataSet;\n      !0 === a.compared ? (a.compared = !1, a = {\n        type: \"dataSetUncompared\",\n        dataSet: a\n      }) : (a.compared = !0, a = {\n        type: \"dataSetCompared\",\n        dataSet: a\n      });\n      var b = this.chart;\n      b.validateData();\n      a.chart = b;\n      this.fire(a.type, a);\n    },\n    getRealDiv: function (a) {\n      a || (a = window.event);\n      a = a.currentTarget ? a.currentTarget : a.srcElement;\n      \"amCBContainer\" == a.parentNode.name && (a = a.parentNode);\n      return a;\n    },\n    countDataSets: function (a) {\n      var b = this.dataProvider,\n          c = 0,\n          d;\n\n      for (d = 0; d < b.length; d++) !0 === b[d][a] && c++;\n\n      return c;\n    }\n  });\n})();\n\n(function () {\n  var d = window.AmCharts;\n  d.StackedBullet = d.Class({\n    construct: function () {\n      this.stackDown = !1;\n      this.mastHeight = 8;\n      this.shapes = [];\n      this.backgroundColors = [];\n      this.backgroundAlphas = [];\n      this.borderAlphas = [];\n      this.borderColors = [];\n      this.colors = [];\n      this.rollOverColors = [];\n      this.showOnAxiss = [];\n      this.values = [];\n      this.showAts = [];\n      this.textColor = \"#000000\";\n      this.nextY = 0;\n      this.size = 16;\n    },\n    parseConfig: function () {\n      var a = this.bulletConfig;\n      this.eventObjects = a.eventObjects;\n      this.letters = a.letters;\n      this.shapes = a.shapes;\n      this.backgroundColors = a.backgroundColors;\n      this.backgroundAlphas = a.backgroundAlphas;\n      this.borderColors = a.borderColors;\n      this.borderAlphas = a.borderAlphas;\n      this.colors = a.colors;\n      this.rollOverColors = a.rollOverColors;\n      this.date = a.date;\n      this.showOnAxiss = a.showOnAxis;\n      this.axisCoordinate = a.minCoord;\n      this.showAts = a.showAts;\n      this.values = a.values;\n      this.fontSizes = a.fontSizes;\n    },\n    write: function (a) {\n      this.parseConfig();\n      this.container = a;\n      this.bullets = [];\n      this.fontSize = this.chart.fontSize;\n\n      if (this.graph) {\n        var b = this.graph.fontSize;\n        b && (this.fontSize = b);\n      }\n\n      b = this.letters.length;\n      (this.mastHeight + 2 * (this.fontSize / 2 + 2)) * b > this.availableSpace && (this.stackDown = !0);\n      this.set = a.set();\n      a = 0;\n      var c;\n\n      for (c = 0; c < b; c++) {\n        this.shape = this.shapes[c];\n        this.backgroundColor = this.backgroundColors[c];\n        this.backgroundAlpha = this.backgroundAlphas[c];\n        this.borderAlpha = this.borderAlphas[c];\n        this.borderColor = this.borderColors[c];\n        this.rollOverColor = this.rollOverColors[c];\n        this.showOnAxis = this.showOnAxiss[c];\n        this.color = this.colors[c];\n        this.value = this.values[c];\n        this.showAt = this.showAts[c];\n        var d = this.fontSizes[c];\n        isNaN(d) || (this.fontSize = d);\n        this.addLetter(this.letters[c], a, c);\n        this.showOnAxis || a++;\n      }\n    },\n    addLetter: function (a, b, c) {\n      var e = this.container;\n      b = e.set();\n      var h = -1,\n          l = this.stackDown,\n          k = this.graph.valueAxis;\n      this.showOnAxis && (this.stackDown = k.reversed ? !0 : !1);\n      this.stackDown && (h = 1);\n      var g = 0,\n          m = 0,\n          f = 0,\n          p,\n          r = this.fontSize,\n          t = this.mastHeight,\n          x = this.shape,\n          y = this.textColor;\n      void 0 !== this.color && (y = this.color);\n      void 0 === a && (a = \"\");\n      a = d.fixBrakes(a);\n      a = d.text(e, a, y, this.chart.fontFamily, this.fontSize);\n      a.node.style.pointerEvents = \"none\";\n      e = a.getBBox();\n      this.labelWidth = y = e.width;\n      this.labelHeight = e.height;\n      var n,\n          e = 0;\n\n      switch (x) {\n        case \"sign\":\n          n = this.drawSign(b);\n          g = t + 4 + r / 2;\n          e = t + r + 4;\n          1 == h && (g -= 4);\n          break;\n\n        case \"flag\":\n          n = this.drawFlag(b);\n          m = y / 2 + 3;\n          g = t + 4 + r / 2;\n          e = t + r + 4;\n          1 == h && (g -= 4);\n          break;\n\n        case \"pin\":\n          n = this.drawPin(b);\n          g = 6 + r / 2;\n          e = r + 8;\n          break;\n\n        case \"triangleUp\":\n          n = this.drawTriangleUp(b);\n          g = -r - 1;\n          e = r + 4;\n          h = -1;\n          break;\n\n        case \"triangleDown\":\n          n = this.drawTriangleDown(b);\n          g = r + 1;\n          e = r + 4;\n          h = -1;\n          break;\n\n        case \"triangleLeft\":\n          n = this.drawTriangleLeft(b);\n          m = r;\n          e = r + 4;\n          h = -1;\n          break;\n\n        case \"triangleRight\":\n          n = this.drawTriangleRight(b);\n          m = -r;\n          h = -1;\n          e = r + 4;\n          break;\n\n        case \"arrowUp\":\n          n = this.drawArrowUp(b);\n          a.hide();\n          break;\n\n        case \"arrowDown\":\n          n = this.drawArrowDown(b);\n          a.hide();\n          e = r + 4;\n          break;\n\n        case \"text\":\n          h = -1;\n          n = this.drawTextBackground(b, a);\n          g = this.labelHeight + 3;\n          e = r + 10;\n          break;\n\n        case \"round\":\n          n = this.drawCircle(b);\n      }\n\n      this.bullets[c] = n;\n      this.showOnAxis ? (p = isNaN(this.nextAxisY) ? this.axisCoordinate : this.nextY, f = g * h, this.nextAxisY = p + h * e) : this.value ? (p = this.value, k.recalculateToPercents && (p = p / k.recBaseValue * 100 - 100), p = k.getCoordinate(p) - this.bulletY, f = g * h) : this.showAt ? (n = this.graphDataItem.values, k.recalculateToPercents && (n = this.graphDataItem.percents), n && (p = k.getCoordinate(n[this.showAt]) - this.bulletY, f = g * h)) : (p = this.nextY, f = g * h);\n      a.translate(m, f);\n      b.push(a);\n      b.translate(0, p);\n      this.addEventListeners(b, c);\n      this.nextY = p + h * e;\n      this.stackDown = l;\n    },\n    addEventListeners: function (a, b) {\n      var c = this;\n      a.click(function () {\n        c.handleClick(b);\n      }).mouseover(function () {\n        c.handleMouseOver(b);\n      }).touchend(function () {\n        c.handleMouseOver(b, !0);\n        c.handleClick(b);\n      }).mouseout(function () {\n        c.handleMouseOut(b);\n      });\n    },\n    drawPin: function (a) {\n      var b = -1;\n      this.stackDown && (b = 1);\n      var c = this.fontSize + 4;\n      return this.drawRealPolygon(a, [0, c / 2, c / 2, -c / 2, -c / 2, 0], [0, b * c / 4, b * (c + c / 4), b * (c + c / 4), b * c / 4, 0]);\n    },\n    drawSign: function (a) {\n      var b = -1;\n      this.stackDown && (b = 1);\n      var c = this.mastHeight * b,\n          e = this.fontSize / 2 + 2,\n          h = d.line(this.container, [0, 0], [0, c], this.borderColor, this.borderAlpha, 1),\n          l = d.circle(this.container, e, this.backgroundColor, this.backgroundAlpha, 1, this.borderColor, this.borderAlpha);\n      l.translate(0, c + e * b);\n      a.push(h);\n      a.push(l);\n      this.set.push(a);\n      return l;\n    },\n    drawFlag: function (a) {\n      var b = -1;\n      this.stackDown && (b = 1);\n      var c = this.fontSize + 4,\n          e = this.labelWidth + 6,\n          h = this.mastHeight,\n          b = 1 == b ? b * h : b * h - c,\n          h = d.line(this.container, [0, 0], [0, b], this.borderColor, this.borderAlpha, 1),\n          c = d.polygon(this.container, [0, e, e, 0], [0, 0, c, c], this.backgroundColor, this.backgroundAlpha, 1, this.borderColor, this.borderAlpha);\n      c.translate(0, b);\n      a.push(h);\n      a.push(c);\n      this.set.push(a);\n      return c;\n    },\n    drawTriangleUp: function (a) {\n      var b = this.fontSize + 7;\n      return this.drawRealPolygon(a, [0, b / 2, -b / 2, 0], [0, b, b, 0]);\n    },\n    drawArrowUp: function (a) {\n      var b = this.size,\n          c = b / 2,\n          d = b / 4;\n      return this.drawRealPolygon(a, [0, c, d, d, -d, -d, -c, 0], [0, c, c, b, b, c, c, 0]);\n    },\n    drawArrowDown: function (a) {\n      var b = this.size,\n          c = b / 2,\n          d = b / 4;\n      return this.drawRealPolygon(a, [0, c, d, d, -d, -d, -c, 0], [0, -c, -c, -b, -b, -c, -c, 0]);\n    },\n    drawTriangleDown: function (a) {\n      var b = this.fontSize + 7;\n      return this.drawRealPolygon(a, [0, b / 2, -b / 2, 0], [0, -b, -b, 0]);\n    },\n    drawTriangleLeft: function (a) {\n      var b = this.fontSize + 7;\n      return this.drawRealPolygon(a, [0, b, b, 0], [0, -b / 2, b / 2]);\n    },\n    drawTriangleRight: function (a) {\n      var b = this.fontSize + 7;\n      return this.drawRealPolygon(a, [0, -b, -b, 0], [0, -b / 2, b / 2, 0]);\n    },\n    drawRealPolygon: function (a, b, c) {\n      b = d.polygon(this.container, b, c, this.backgroundColor, this.backgroundAlpha, 1, this.borderColor, this.borderAlpha);\n      a.push(b);\n      this.set.push(a);\n      return b;\n    },\n    drawCircle: function (a) {\n      var b = d.circle(this.container, this.fontSize / 2, this.backgroundColor, this.backgroundAlpha, 1, this.borderColor, this.borderAlpha);\n      a.push(b);\n      this.set.push(a);\n      return b;\n    },\n    drawTextBackground: function (a, b) {\n      var c = b.getBBox(),\n          d = -c.width / 2 - 5,\n          h = c.width / 2 + 5,\n          c = -c.height - 12;\n      return this.drawRealPolygon(a, [d, -5, 0, 5, h, h, d, d], [-5, -5, 0, -5, -5, c, c, -5]);\n    },\n    handleMouseOver: function (a, b) {\n      b || this.bullets[a].attr({\n        fill: this.rollOverColors[a]\n      });\n      var c = this.eventObjects[a],\n          e = {\n        type: \"rollOverStockEvent\",\n        eventObject: c,\n        graph: this.graph,\n        date: this.date\n      },\n          h = this.bulletConfig.eventDispatcher;\n      e.chart = h;\n      h.fire(e.type, e);\n      c.url && this.bullets[a].setAttr(\"cursor\", \"pointer\");\n      this.chart.showBalloon(d.fixNewLines(c.description), h.stockEventsSettings.balloonColor, !0);\n    },\n    handleClick: function (a) {\n      a = this.eventObjects[a];\n      var b = {\n        type: \"clickStockEvent\",\n        eventObject: a,\n        graph: this.graph,\n        date: this.date\n      },\n          c = this.bulletConfig.eventDispatcher;\n      b.chart = c;\n      c.fire(b.type, b);\n      b = a.urlTarget;\n      b || (b = c.stockEventsSettings.urlTarget);\n      d.getURL(a.url, b);\n    },\n    handleMouseOut: function (a) {\n      this.bullets[a].attr({\n        fill: this.backgroundColors[a]\n      });\n      a = {\n        type: \"rollOutStockEvent\",\n        eventObject: this.eventObjects[a],\n        graph: this.graph,\n        date: this.date\n      };\n      var b = this.bulletConfig.eventDispatcher;\n      a.chart = b;\n      b.fire(a.type, a);\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}