{"ast":null,"code":"/* ========================================================= \n * bootstrap-gtreetable v2.2.1-alpha\n * https://github.com/gilek/bootstrap-gtreetable\n * ========================================================= \n * Copyright 2014 Maciej KÅ‚ak\n * Licensed under MIT (https://github.com/gilek/bootstrap-gtreetable/blob/master/LICENSE)\n * ========================================================= */\n!function (a) {\n  function b(b, c) {\n    this.options = c, this.$tree = a(b), this.language = void 0 === this.options.languages[this.options.language] ? this.options.languages[\"en-US\"] : a.extend({}, this.options.languages[\"en-US\"], this.options.languages[this.options.language]), this._isNodeDragging = !1, this._lastId = 0, this.actions = [], null !== this.options.defaultActions && (this.actions = this.options.defaultActions), void 0 !== this.options.actions && this.actions.push.apply(this.actions, this.options.actions), this.options.cache > 0 && (this.cacheManager = new d(this));\n    var e = this.language;\n\n    if (this.template = void 0 !== this.options.template ? this.options.template : '<table class=\"table gtreetable\"><tr class=\"' + this.options.classes.node + \" \" + this.options.classes.collapsed + '\"><td><span>${draggableIcon}${indent}${ecIcon}${selectedIcon}${typeIcon}${name}</span><span class=\"hide ' + this.options.classes.action + '\">${input}${saveButton} ${cancelButton}</span><div class=\"btn-group pull-right ' + this.options.classes.buttons + '\">${actionsButton}${actionsList}</div></td></tr></table>', this.templateParts = void 0 !== this.options.templateParts ? this.options.templateParts : {\n      draggableIcon: this.options.draggable === !0 ? '<span class=\"' + this.options.classes.handleIcon + '\">&zwnj;</span><span class=\"' + this.options.classes.draggablePointer + '\">&zwnj;</span>' : \"\",\n      indent: '<span class=\"' + this.options.classes.indent + '\">&zwnj;</span>',\n      ecIcon: '<span class=\"' + this.options.classes.ceIcon + ' icon\"></span>',\n      selectedIcon: '<span class=\"' + this.options.classes.selectedIcon + ' icon\"></span>',\n      typeIcon: '<span class=\"' + this.options.classes.typeIcon + '\"></span>',\n      name: '<span class=\"' + this.options.classes.name + '\"></span>',\n      input: '<input type=\"text\" name=\"name\" value=\"\" style=\"width: ' + this.options.inputWidth + '\" class=\"form-control\" />',\n      saveButton: '<button type=\"button\" class=\"btn btn-sm btn-success ' + this.options.classes.saveButton + '\">' + e.save + \"</button>\",\n      cancelButton: '<button type=\"button\" class=\"btn btn-sm ' + this.options.classes.cancelButton + '\">' + e.cancel + \"</button>\",\n      actionsButton: '<button type=\"button\" class=\"btn btn-sm btn-default dropdown-toggle\" data-toggle=\"dropdown\">' + e.action + ' <span class=\"caret\"></span></button>',\n      actionsList: \"\"\n    }, this.actions.length > 0) {\n      var f = '<ul class=\"dropdown-menu\" role=\"menu\"><li role=\"presentation\" class=\"dropdown-header\">' + e.action + \"</li>\";\n      a.each(this.actions, function (a, b) {\n        if (b.divider === !0) f += '<li class=\"divider\"></li>';else {\n          var c = b.name.match(/\\$\\{([\\w\\W]+)\\}/),\n              d = null !== c && void 0 !== c[1] && void 0 !== e.actions[c[1]] ? e.actions[c[1]] : b.name;\n          f += '<li role=\"presentation\"><a href=\"#notarget\" class=\"node-action-' + a + '\" tabindex=\"-1\">' + d + \"</a></li>\";\n        }\n      }), f += \"</ul>\", this.templateParts.actionsList = f;\n    }\n\n    var g = this.template;\n    a.each(this.templateParts, function (a, b) {\n      g = g.replace(\"${\" + a + \"}\", b);\n    }), this.options.template = g, 0 === this.$tree.find(\"tbody\").length && this.$tree.append(\"<tbody></tbody>\"), this.options.readonly || this.$tree.addClass(\"gtreetable-fullAccess\"), this.$nodeTemplate = a(void 0 !== this.options.templateSelector ? this.options.templateSelector : this.options.template).find(\".\" + this.options.classes.node), this.options.draggable === !0 && this.isNodeDragging(!1), this.init();\n  }\n\n  function c(a, b) {\n    this.manager = b, this.level = parseInt(a.level), this.parent = a.parent, this.name = a.name, this.type = a.type, this.id = a.id, this.insertPosition = void 0, this.movePosition = void 0, this.relatedNodeId = void 0, this._isExpanded = !1, this._isLoading = !1, this._isSaved = void 0 === a.id ? !1 : !0, this._isSelected = !1, this._isHovered = !1, this._isEditable = !1, this.init();\n  }\n\n  function d(a) {\n    this._cached = {}, this.manager = a;\n  }\n\n  function e(c, d) {\n    var e = null;\n    return this.each(function () {\n      var f = a(this),\n          g = f.data(\"bs.gtreetable\"),\n          h = a.extend({}, a.fn.gtreetable.defaults, f.data(), \"object\" == typeof c && c);\n      g || (g = new b(this, h), f.data(\"bs.gtreetable\", g)), \"string\" == typeof c && (e = g[c](d));\n    }), e || (e = this), e;\n  }\n\n  b.prototype = {\n    getNode: function (a) {\n      return a.data(\"bs.gtreetable.gtreetablenode\");\n    },\n    getNodeById: function (a) {\n      return this.getNode(this.$tree.find(\".\" + this.options.classes.node + \"[data-id='\" + a + \"']\"));\n    },\n    getSelectedNodes: function () {\n      var b = [],\n          c = this;\n      return a.each(this.$tree.find(\".\" + this.options.classes.selected), function () {\n        b.push(c.getNode(a(this)));\n      }), b;\n    },\n    getSourceNodes: function (b, c) {\n      var d = this,\n          e = this.getNodeById(b),\n          f = b > 0 && this.options.cache > 0;\n\n      if (f && c !== !0) {\n        var g = this.cacheManager.get(e);\n\n        if (void 0 !== g) {\n          var h = {};\n          return h[d.options.nodesWrapper] = g, h;\n        }\n      }\n\n      var i = this.options.source(b),\n          j = {\n        beforeSend: function () {\n          b > 0 && e.isLoading(!0);\n        },\n        success: function (a) {\n          if (void 0 !== a[d.options.nodesWrapper]) {\n            g = a[d.options.nodesWrapper];\n\n            for (var c = 0; c < g.length; c += 1) g[c].parent = b;\n\n            \"function\" == typeof d.options.sort && g.sort(d.options.sort), f && d.cacheManager.set(e, g);\n          }\n        },\n        error: function (a) {\n          alert(a.status + \": \" + a.responseText);\n        },\n        complete: function () {\n          b > 0 && e.isLoading(!1);\n        }\n      };\n      return a.ajax(a.extend({}, j, i));\n    },\n    init: function () {\n      var a = this;\n      this.getSourceNodes(0).done(function (b) {\n        var d = b[a.options.nodesWrapper];\n\n        for (var e in d) {\n          var f = new c(d[e], a);\n          f.insertIntegral(f);\n        }\n      });\n    },\n    isNodeDragging: function (a) {\n      return void 0 === a ? this._isNodeDragging : void (a === !0 ? (this._isNodeDragging = !0, this.$tree.disableSelection()) : (this._isNodeDragging = !1, this.$tree.enableSelection()));\n    },\n    generateNewId: function () {\n      return this._lastId += 1, \"g\" + this._lastId;\n    }\n  }, c.prototype = {\n    getPath: function () {\n      var b = this,\n          c = [b.name],\n          d = b.parent;\n      return b.$node.prevAll(\".\" + this.manager.options.classes.node).each(function () {\n        var e = b.manager.getNode(a(this));\n        e.id === d && (d = e.parent, c[c.length] = e.name);\n      }), c;\n    },\n    getParents: function () {\n      for (var a = [], b = this.parent;;) {\n        if (0 === b) break;\n        var c = this.manager.getNodeById(b);\n        a.push(c), b = c.parent;\n      }\n\n      return a;\n    },\n    getIP: function () {\n      var b = this,\n          c = \"0\",\n          d = b.getParents();\n      return d.reverse(), a.each(d, function () {\n        c += \".\" + this.id;\n      }), c += \".\" + b.id;\n    },\n    getSiblings: function () {\n      for (var b = this, c = [], d = \".\" + b.manager.options.classes.node + \"[data-parent='\" + b.parent + \"']\", e = b.$node.prevAll(d), f = e.length - 1; f >= 0; --f) c.push(b.manager.getNode(a(e[f])));\n\n      return c.push(b), b.$node.nextAll(d).each(function () {\n        c.push(b.manager.getNode(a(this)));\n      }), c;\n    },\n    getDescendants: function (b) {\n      var c = this,\n          d = a.extend({}, {\n        depth: 1,\n        includeNotSaved: !1,\n        index: void 0\n      }, b),\n          e = \".\" + c.manager.options.classes.node,\n          f = -1 !== d.depth || isNaN(d.depth) ? d.depth : 1 / 0,\n          g = [];\n\n      if (d.includeNotSaved === !1 && (e += \".\" + c.manager.options.classes.saved), f > 1 ? c.$node.nextAll(e).each(function () {\n        var b = c.manager.getNode(a(this));\n        return (b.level <= c.level || b.level === c.level && b.parent === c.parent) && (d.includeNotSaved !== !0 || b.isSaved()) ? !1 : void g.push(b);\n      }) : c.$node.nextAll(e + \"[data-parent='\" + c.id + \"'][data-level='\" + (c.level + 1) + \"']\").each(function () {\n        g.push(c.manager.getNode(a(this)));\n      }), !isNaN(d.index)) {\n        var h = d.index >= 0 ? d.index - 1 : g.length + d.index;\n        return g[h];\n      }\n\n      return g;\n    },\n    getMovePosition: function () {\n      return this.movePosition;\n    },\n    setMovePosition: function (a, b) {\n      this.$node.removeClass(this.manager.options.classes.draggableContainer), void 0 !== a && (this.$node.addClass(this.manager.options.classes.draggableContainer), this.movePosition = a, this.$pointer.css(\"top\", b.top + \"px\"), this.$pointer.css(\"left\", b.left + \"px\"));\n    },\n    getId: function () {\n      return this.id;\n    },\n    getName: function () {\n      return this.isEditable() ? this.$input.val() : this.name;\n    },\n    getParent: function () {\n      return this.parent;\n    },\n    getInsertPosition: function () {\n      return this.insertPosition;\n    },\n    getRelatedNodeId: function () {\n      return this.relatedNodeId;\n    },\n    init: function () {\n      this.$node = this.manager.$nodeTemplate.clone(!1), this.$name = this.$node.find(\".\" + this.manager.options.classes.name), this.$ceIcon = this.$node.find(\".\" + this.manager.options.classes.ceIcon), this.$typeIcon = this.$node.find(\".\" + this.manager.options.classes.typeIcon), this.$icon = this.$node.find(\".\" + this.manager.options.classes.icon), this.$action = this.$node.find(\".\" + this.manager.options.classes.action), this.$indent = this.$node.find(\".\" + this.manager.options.classes.indent), this.$saveButton = this.$node.find(\".\" + this.manager.options.classes.saveButton), this.$cancelButton = this.$node.find(\".\" + this.manager.options.classes.cancelButton), this.$input = this.$node.find(\"input\"), this.$pointer = this.$node.find(\".\" + this.manager.options.classes.draggablePointer), this.render(), this.attachEvents(), this.$node.data(\"bs.gtreetable.gtreetablenode\", this);\n    },\n    render: function () {\n      this.$name.html(this.name), void 0 !== this.id && (this.$node.attr(\"data-id\", this.id), this.isSaved(!0), this.manager.options.draggable === !0 && this.$node.addClass(this.manager.options.classes.draggable)), this.$node.attr(\"data-parent\", this.parent), this.$node.attr(\"data-level\", this.level), this.$indent.css(\"marginLeft\", (parseInt(this.level) - this.manager.options.rootLevel) * this.manager.options.nodeIndent + \"px\").html(\"&zwnj;\"), void 0 !== this.type && this.manager.options.types && void 0 !== this.manager.options.types[this.type] && this.$typeIcon.addClass(this.manager.options.types[this.type]).show();\n    },\n    attachEvents: function () {\n      var b = this,\n          c = parseInt(this.manager.options.selectLimit);\n\n      if (this.$node.mouseover(function () {\n        (b.manager.options.draggable !== !0 || b.manager.isNodeDragging() !== !0) && (b.$node.addClass(b.manager.options.classes.hovered), b.isHovered(!0));\n      }), this.$node.mouseleave(function () {\n        b.$node.removeClass(b.manager.options.classes.hovered), b.isHovered(!1);\n      }), this.$name.click(isNaN(c) === !1 && (c > 0 || -1 === c) ? function (d) {\n        if (b.isSelected()) a.isFunction(b.manager.options.onUnselect) && b.manager.options.onUnselect(b), b.isSelected(!1);else {\n          var e = b.manager.getSelectedNodes();\n          1 === c && 1 === e.length ? (e[0].isSelected(!1), e = []) : e.length === c && (a.isFunction(b.manager.options.onSelectOverflow) && b.options.onSelectOverflow(b), d.preventDefault()), (e.length < c || -1 === c) && b.isSelected(!0), a.isFunction(b.manager.options.onSelect) && b.manager.options.onSelect(b);\n        }\n      } : function () {\n        b.$ceIcon.click();\n      }), this.$ceIcon.click(function (a) {\n        b.isExpanded() ? b.collapse() : b.expand({\n          isAltPressed: a.altKey\n        });\n      }), b.manager.options.dragCanExpand === !0 && this.$ceIcon.mouseover(function () {\n        b.manager.options.draggable === !0 && b.manager.isNodeDragging() === !0 && (b.isExpanded() || b.expand());\n      }), a.each(this.manager.actions, function (a, c) {\n        b.$node.find(\".\" + b.manager.options.classes.action + \"-\" + a).click(function () {\n          c.event(b, b.manager);\n        });\n      }), this.$saveButton.click(function () {\n        b.save();\n      }), this.$cancelButton.click(function () {\n        b.saveCancel();\n      }), b.manager.options.draggable === !0) {\n        var d = function (a, c) {\n          var d,\n              e = a.offset.top - c.offset().top,\n              f = c.offset().top,\n              g = c.outerHeight(),\n              h = g - Math.round(a.helper.outerHeight() / 2),\n              i = {\n            left: b.manager.$tree.offset().left + 5\n          };\n          return .3 * h >= e ? (d = \"before\", i.top = f + 3) : .7 * h >= e ? (d = \"lastChild\", i.top = f + h / 2) : (d = \"after\", i.top = f + h), i.top += 2, {\n            position: d,\n            pointerOffset: i\n          };\n        };\n\n        this.$node.draggable({\n          scroll: !0,\n          refreshPositions: b.manager.options.dragCanExpand,\n          helper: function () {\n            var c = b.manager.getNode(a(this));\n            return '<mark class=\"' + b.manager.options.classes.draggableHelper + '\">' + c.name + \"</mark>\";\n          },\n          cursorAt: {\n            top: 0,\n            left: 0\n          },\n          handle: \".\" + b.manager.options.classes.handleIcon,\n          start: function () {\n            a.browser.webkit || a(this).data(\"bs.gtreetable.gtreetablenode.scrollTop\", a(window).scrollTop());\n          },\n          stop: function () {\n            b.manager.isNodeDragging(!1);\n          },\n          drag: function (c, e) {\n            if (!a.browser.webkit) {\n              var f = a(window).scrollTop(),\n                  g = a(this).data(\"bs.gtreetable.gtreetablenode.scrollTop\") - f;\n              e.position.top -= f + g, a(this).data(\"bs.gtreetable.gtreetablenode.startingScrollTop\", f);\n            }\n\n            var h = a(this).data(\"bs.gtreetable.gtreetablenode.currentDroppable\");\n\n            if (h) {\n              var i = d(e, h);\n              b.manager.getNode(h).setMovePosition(i.position, i.pointerOffset);\n            }\n          }\n        }).droppable({\n          accept: \".\" + b.manager.options.classes.node,\n          over: function (c, e) {\n            var f = a(this),\n                g = d(e, f);\n            b.manager.getNode(f).setMovePosition(g.position, g.pointerOffset), e.draggable.data(\"bs.gtreetable.gtreetablenode.currentDroppable\", f);\n          },\n          out: function (c, d) {\n            d.draggable.removeData(\"bs.gtreetable.gtreetablenode.currentDroppable\"), b.manager.getNode(a(this)).setMovePosition();\n          },\n          drop: function (c, d) {\n            var e = a(this),\n                f = b.manager.getNode(e),\n                g = f.getMovePosition();\n            d.draggable.removeData(\"bs.gtreetable.gtreetablenode.currentDroppable\"), f.setMovePosition(), b.manager.getNode(d.draggable).move(f, g);\n          }\n        });\n      }\n    },\n    makeEditable: function () {\n      this.showForm(!0);\n    },\n    save: function () {\n      var b = this;\n      a.isFunction(b.manager.options.onSave) ? a.when(a.ajax(b.manager.options.onSave(b))).done(function (a) {\n        b._save(a);\n      }) : b._save({\n        name: b.getName(),\n        id: b.manager.generateNewId()\n      });\n    },\n    _save: function (b) {\n      var c = this;\n      c.id = b.id, c.name = b.name, a.isFunction(c.manager.options.sort) && c.sort(), this.manager.options.cache > 0 && this.manager.cacheManager.synchronize(c.isSaved() ? \"edit\" : \"add\", c), c.render(), c.showForm(!1), c.isHovered(!1);\n    },\n    saveCancel: function () {\n      this.showForm(!1), this.isSaved() || this._remove();\n    },\n    expand: function (b) {\n      var d = this,\n          e = d,\n          f = a.extend({}, {\n        isAltPressed: !1,\n        onAfterFill: function (a, b) {\n          a.isExpanded(!0), 0 === b.length && (a.manager.options.showExpandIconOnEmpty === !0 ? a.isExpanded(!1) : a.showCeIcon(!1));\n        }\n      }, b);\n      a.when(this.manager.getSourceNodes(d.id, f.isAltPressed)).done(function (a) {\n        var b = a[d.manager.options.nodesWrapper];\n\n        for (var g in b) {\n          var h = new c(b[g], d.manager);\n          d.insertIntegral(h, e), e = h;\n        }\n\n        f && f.onAfterFill(d, b);\n      });\n    },\n    collapse: function () {\n      this.isExpanded(!1), a.each(this.getDescendants({\n        depth: -1,\n        includeNotSaved: !0\n      }), function () {\n        this.$node.remove();\n      });\n    },\n    _canAdd: function (a) {\n      var b = {\n        result: !(0 === a.parent && this.manager.options.manyroots === !1)\n      };\n      return b.result || (b.message = this.manager.language.messages.onNewRootNotAllowed), b;\n    },\n    add: function (a, b) {\n      function d() {\n        f && (e.isExpanded(!0), e.showCeIcon(!0)), g.insert(a, e), g.insertPosition = a, g.relatedNodeId = e.id, g.showForm(!0);\n      }\n\n      var e = this,\n          f = \"lastChild\" === a || \"firstChild\" === a,\n          g = new c({\n        level: e.level + (f ? 1 : 0),\n        parent: e.level !== this.manager.options.rootLevel || f ? f ? e.id : e.parent : 0,\n        type: b\n      }, this.manager),\n          h = this._canAdd(g);\n\n      return h.result ? void (f && !e.isExpanded() ? e.expand({\n        onAfterFill: function () {\n          d();\n        }\n      }) : d()) : (alert(h.message), !1);\n    },\n    insert: function (a, b) {\n      var c,\n          d,\n          e = this;\n      if (\"before\" === a) b.$node.before(e.$node);else if (\"after\" === a) d = b, b.isExpanded() && (c = b.getDescendants({\n        depth: 1,\n        index: -1,\n        includeNotSaved: !0\n      }), d = void 0 === c ? d : c), d.$node.after(e.$node);else if (\"firstChild\" === a) this.manager.getNodeById(b.id).$node.after(e.$node);else {\n        if (\"lastChild\" !== a) throw \"Wrong position.\";\n        c = b.getDescendants({\n          depth: 1,\n          index: -1,\n          includeNotSaved: !0\n        }), d = void 0 === c ? b : c, d.$node.after(e.$node);\n      }\n    },\n    insertIntegral: function (a, b) {\n      void 0 === b ? this.manager.$tree.append(a.$node) : b.$node.after(a.$node);\n    },\n    remove: function () {\n      var b = this;\n      b.isSaved() && a.isFunction(b.manager.options.onDelete) ? a.when(a.ajax(b.manager.options.onDelete(b))).done(function () {\n        b._remove();\n      }) : this._remove();\n    },\n    _remove: function () {\n      if (this.isExpanded() === !0 && this.collapse(), this.$node.remove(), this.parent > 0) {\n        var a = this.manager.getNodeById(this.parent);\n        0 === a.getDescendants({\n          depth: 1,\n          includeNotSaved: !0\n        }).length && a.collapse();\n      }\n\n      this.manager.options.cache > 0 && this.manager.cacheManager.synchronize(\"delete\", this);\n    },\n    _canMove: function (b, c) {\n      var d = this,\n          e = {\n        result: !0\n      };\n      return 0 === b.parent && this.manager.options.manyroots === !1 && \"lastChild\" !== c ? (e.result = !1, e.message = this.manager.language.messages.onMoveAsRoot) : a.each(b.getParents(), function () {\n        return this.id === d.id ? (e.result = !1, e.message = this.manager.language.messages.onMoveInDescendant, !1) : void 0;\n      }), e;\n    },\n    move: function (b, c) {\n      var d = this,\n          e = this._canMove(b, c);\n\n      return e.result === !1 ? (alert(e.message), !1) : void (a.isFunction(d.manager.options.onMove) ? a.when(a.ajax(d.manager.options.onMove(d, b, c))).done(function () {\n        d._move(b, c);\n      }) : d._move(b, c));\n    },\n    _move: function (b, c) {\n      var d = this,\n          e = d.getDescendants({\n        depth: -1,\n        includeNotSaved: !0\n      }),\n          f = a.extend({}, d),\n          g = d.getIP(),\n          h = b.level - d.level;\n\n      if (d.parent = \"lastChild\" === c ? b.id : b.parent, d.level = b.level, \"lastChild\" !== c || b.isExpanded()) {\n        if (\"lastChild\" === c && (d.level += 1, b.showCeIcon(!0)), d.render(), d.insert(c, b), e.length > 0) {\n          var i = d.$node;\n          \"lastChild\" === c && (h += 1), a.each(e, function () {\n            var a = this;\n            a.level += h, a.render(), i.after(a.$node), i = a.$node;\n          });\n        }\n      } else d.$node.remove(), a.each(e, function () {\n        this.$node.remove();\n      });\n\n      var j = d.manager.getNodeById(f.parent);\n      void 0 !== j && 0 === j.getDescendants({\n        depth: 1,\n        includeNotSaved: !0\n      }).length && j.isExpanded(!1), a.isFunction(d.manager.options.sort) && d.sort(), this.manager.options.cache > 0 && this.manager.cacheManager.synchronize(\"move\", d, {\n        oOldNode: f,\n        oldIP: g\n      });\n    },\n    sort: function () {\n      var b = this,\n          c = b.getSiblings();\n\n      if (c.length > 0) {\n        var d,\n            e = b.isExpanded() ? b.getDescendants({\n          depth: -1,\n          includeNotSaved: !0\n        }) : [];\n        a.each(c, function () {\n          return -1 === b.manager.options.sort(b, this) ? (d = this, !1) : void 0;\n        }), void 0 === d ? (d = c[c.length - 1], d.isExpanded() && (d = b.manager.getNodeById(b.parent).getDescendants({\n          depth: -1,\n          index: -1,\n          includeNotSaved: !0\n        })), d.$node.after(b.$node)) : d.$node.before(b.$node);\n        var f = b.$node;\n        a.each(e, function () {\n          var a = this;\n          f.after(a.$node), f = a.$node;\n        });\n      }\n    },\n    isLoading: function (a) {\n      return void 0 === a ? this._isLoading : void (a ? (this.$name.addClass(this.manager.options.classes.loading), this._isLoading = !0) : (this.$name.removeClass(this.manager.options.classes.loading), this._isLoading = !1));\n    },\n    isSaved: function (a) {\n      return void 0 === a ? this._isSaved : void (a ? (this.$node.addClass(this.manager.options.classes.saved), this._isSaved = !0) : (this.$node.removeClass(this.manager.options.classes.saved), this._isSaved = !1));\n    },\n    isSelected: function (a) {\n      return void 0 === a ? this._isSelected : void (a ? (this.$node.addClass(this.manager.options.classes.selected), this._isSelected = !0) : (this.$node.removeClass(this.manager.options.classes.selected), this._isSelected = !1));\n    },\n    isExpanded: function (a) {\n      return void 0 === a ? this._isExpanded : void (a ? (this.$node.addClass(this.manager.options.classes.expanded).removeClass(this.manager.options.classes.collapsed), this._isExpanded = !0) : (this.$node.addClass(this.manager.options.classes.collapsed).removeClass(this.manager.options.classes.expanded), this._isExpanded = !1));\n    },\n    isHovered: function (a) {\n      return void 0 === a ? this._isHovered : void (a ? (this.$node.addClass(this.manager.options.classes.hovered), this._isHovered = !0) : (this.$node.removeClass(this.manager.options.classes.hovered), this.$node.find(\".btn-group\").removeClass(\"open\"), this._isHovered = !1));\n    },\n    isEditable: function (a) {\n      return void 0 === a ? this._isEditable : void (this._isEditable = a);\n    },\n    showCeIcon: function (a) {\n      this.$ceIcon.css(\"visibility\", a ? \"visible\" : \"hidden\");\n    },\n    showForm: function (a) {\n      a === !0 ? (this.isEditable(!0), this.$input.val(this.name), this.$name.addClass(\"hide\"), this.$action.removeClass(\"hide\"), this.$input.focus()) : (this.isEditable(!1), this.$name.removeClass(\"hide\"), this.$action.addClass(\"hide\"));\n    }\n  }, d.prototype = {\n    _getIP: function (a) {\n      return \"string\" == typeof a ? a : a.getIP();\n    },\n    get: function (a) {\n      return this._cached[this._getIP(a)];\n    },\n    set: function (a, b) {\n      this._cached[this._getIP(a)] = b;\n    },\n    remove: function (a) {\n      this._cached[this._getIP(a)] = void 0;\n    },\n    synchronize: function (a, b, c) {\n      if (b.parent > 0) switch (a) {\n        case \"add\":\n          this._synchronizeAdd(b);\n\n          break;\n\n        case \"edit\":\n          this._synchronizeEdit(b);\n\n          break;\n\n        case \"delete\":\n          this._synchronizeDelete(b);\n\n          break;\n\n        case \"move\":\n          this._synchronizeMove(b, c);\n\n          break;\n\n        default:\n          throw \"Wrong method.\";\n      }\n    },\n    _synchronizeAdd: function (a) {\n      var b = this.manager.getNodeById(a.parent);\n\n      if (this.manager.options.cache > 1) {\n        var c = this.get(b);\n        void 0 !== c && (c.push({\n          id: a.id,\n          name: a.getName(),\n          level: a.level,\n          type: a.type,\n          parent: a.parent\n        }), this.set(b, this.isSortDefined() ? this.sort(c) : c));\n      } else this.remove(b);\n    },\n    _synchronizeEdit: function (b) {\n      var c = this.manager.getNodeById(b.parent);\n\n      if (this.manager.options.cache > 1) {\n        var d = this.get(c);\n        a.each(d, function () {\n          return this.id === b.id ? (this.name = b.getName(), !1) : void 0;\n        }), this.set(c, this.isSortDefined() ? this.sort(d) : d);\n      } else this.remove(c);\n    },\n    _synchronizeDelete: function (b) {\n      var c = this.manager.getNodeById(b.parent);\n\n      if (this.manager.options.cache > 1) {\n        var d,\n            e = this.get(c);\n        a.each(e, function (a) {\n          return this.id === b.id ? (d = a, !1) : void 0;\n        }), void 0 !== d && (e.splice(d, 1), this.set(c, e));\n      } else this.remove(c);\n    },\n    _synchronizeMove: function (b, c) {\n      var d = this,\n          e = b.getIP(),\n          f = b.level - c.oOldNode.level;\n      a.each(this._cached, function (b) {\n        if (b === c.oldIP || 0 === b.indexOf(c.oldIP + \".\")) {\n          if (d.manager.options.cache > 1) {\n            var g = [],\n                h = b !== c.oldIP ? e + b.substr(c.oldIP.length) : e;\n            a(d.get(b)).each(function () {\n              this.level += f, g.push(this);\n            }), d.set(h, g);\n          }\n\n          d.remove(b);\n        }\n      }), this.synchronize(\"delete\", c.oOldNode), this.synchronize(\"add\", b);\n    },\n    isSortDefined: function () {\n      return a.isFunction(this.manager.options.sort);\n    },\n    sort: function (a) {\n      return a.sort(this.manager.options.sort);\n    }\n  };\n  var f = a.fn.gtreetable;\n  a.fn.gtreetable = e, a.fn.gtreetable.Constructor = b, a.fn.gtreetable.defaults = {\n    nodesWrapper: \"nodes\",\n    nodeIndent: 16,\n    language: \"en\",\n    inputWidth: \"60%\",\n    cache: 2,\n    readonly: !1,\n    selectLimit: 1,\n    rootLevel: 0,\n    manyroots: !1,\n    draggable: !1,\n    dragCanExpand: !1,\n    showExpandIconOnEmpty: !1,\n    languages: {\n      \"en-US\": {\n        save: \"Save\",\n        cancel: \"Cancel\",\n        action: \"Action\",\n        actions: {\n          createBefore: \"Create before\",\n          createAfter: \"Create after\",\n          createFirstChild: \"Create first child\",\n          createLastChild: \"Create last child\",\n          update: \"Update\",\n          \"delete\": \"Delete\"\n        },\n        messages: {\n          onDelete: \"Are you sure?\",\n          onNewRootNotAllowed: \"Adding the now node as root is not allowed.\",\n          onMoveInDescendant: \"The target node should not be descendant.\",\n          onMoveAsRoot: \"The target node should not be root.\"\n        }\n      }\n    },\n    defaultActions: [{\n      name: \"${createBefore}\",\n      event: function (a) {\n        a.add(\"before\", \"default\");\n      }\n    }, {\n      name: \"${createAfter}\",\n      event: function (a) {\n        a.add(\"after\", \"default\");\n      }\n    }, {\n      name: \"${createFirstChild}\",\n      event: function (a) {\n        a.add(\"firstChild\", \"default\");\n      }\n    }, {\n      name: \"${createLastChild}\",\n      event: function (a) {\n        a.add(\"lastChild\", \"default\");\n      }\n    }, {\n      divider: !0\n    }, {\n      name: \"${update}\",\n      event: function (a) {\n        a.makeEditable();\n      }\n    }, {\n      name: \"${delete}\",\n      event: function (a, b) {\n        confirm(b.language.messages.onDelete) && a.remove();\n      }\n    }],\n    classes: {\n      node: \"node\",\n      loading: \"node-loading\",\n      selected: \"node-selected\",\n      hovered: \"node-hovered\",\n      expanded: \"node-expanded\",\n      collapsed: \"node-collapsed\",\n      draggable: \"node-draggable\",\n      draggableHelper: \"node-draggable-helper\",\n      draggablePointer: \"node-draggable-pointer\",\n      draggableContainer: \"node-draggable-container\",\n      saved: \"node-saved\",\n      name: \"node-name\",\n      icon: \"node-icon\",\n      selectedIcon: \"node-icon-selected\",\n      ceIcon: \"node-icon-ce\",\n      typeIcon: \"node-icon-type\",\n      handleIcon: \"node-icon-handle\",\n      action: \"node-action\",\n      indent: \"node-indent\",\n      saveButton: \"node-save\",\n      cancelButton: \"node-cancel\",\n      buttons: \"node-buttons\"\n    }\n  }, a.fn.gtreetable.noConflict = function () {\n    return a.fn.gtreetable = f, this;\n  };\n}(jQuery);","map":null,"metadata":{},"sourceType":"script"}