{"ast":null,"code":"(function () {\n  var h = window.AmCharts;\n  h.AmPieChart = h.Class({\n    inherits: h.AmSlicedChart,\n    construct: function (d) {\n      this.type = \"pie\";\n      h.AmPieChart.base.construct.call(this, d);\n      this.cname = \"AmPieChart\";\n      this.pieBrightnessStep = 30;\n      this.minRadius = 10;\n      this.depth3D = 0;\n      this.startAngle = 90;\n      this.angle = this.innerRadius = 0;\n      this.startRadius = \"500%\";\n      this.pullOutRadius = \"20%\";\n      this.labelRadius = 20;\n      this.labelText = \"[[title]]: [[percents]]%\";\n      this.balloonText = \"[[title]]: [[percents]]% ([[value]])\\n[[description]]\";\n      this.previousScale = 1;\n      this.adjustPrecision = !1;\n      h.applyTheme(this, d, this.cname);\n    },\n    drawChart: function () {\n      h.AmPieChart.base.drawChart.call(this);\n      var d = this.chartData;\n\n      if (h.ifArray(d)) {\n        if (0 < this.realWidth && 0 < this.realHeight) {\n          h.VML && (this.startAlpha = 1);\n          var f = this.startDuration,\n              c = this.container,\n              b = this.updateWidth();\n          this.realWidth = b;\n          var m = this.updateHeight();\n          this.realHeight = m;\n          var e = h.toCoordinate,\n              k = e(this.marginLeft, b),\n              a = e(this.marginRight, b),\n              v = e(this.marginTop, m) + this.getTitleHeight(),\n              n = e(this.marginBottom, m),\n              y,\n              z,\n              g,\n              x = h.toNumber(this.labelRadius),\n              q = this.measureMaxLabel();\n          q > this.maxLabelWidth && (q = this.maxLabelWidth);\n          this.labelText && this.labelsEnabled || (x = q = 0);\n          y = void 0 === this.pieX ? (b - k - a) / 2 + k : e(this.pieX, this.realWidth);\n          z = void 0 === this.pieY ? (m - v - n) / 2 + v : e(this.pieY, m);\n          g = e(this.radius, b, m);\n          g || (b = 0 <= x ? b - k - a - 2 * q : b - k - a, m = m - v - n, g = Math.min(b, m), m < b && (g /= 1 - this.angle / 90, g > b && (g = b)), m = h.toCoordinate(this.pullOutRadius, g), g = (0 <= x ? g - 1.8 * (x + m) : g - 1.8 * m) / 2);\n          g < this.minRadius && (g = this.minRadius);\n          m = e(this.pullOutRadius, g);\n          v = h.toCoordinate(this.startRadius, g);\n          e = e(this.innerRadius, g);\n          e >= g && (e = g - 1);\n          n = h.fitToBounds(this.startAngle, 0, 360);\n          0 < this.depth3D && (n = 270 <= n ? 270 : 90);\n          n -= 90;\n          b = g - g * this.angle / 90;\n\n          for (k = q = 0; k < d.length; k++) a = d[k], !0 !== a.hidden && (q += h.roundTo(a.percents, this.pf.precision));\n\n          q = h.roundTo(q, this.pf.precision);\n          this.tempPrec = NaN;\n          this.adjustPrecision && 100 != q && (this.tempPrec = this.pf.precision + 1);\n\n          for (k = 0; k < d.length; k++) if (a = d[k], !0 !== a.hidden && 0 < a.percents) {\n            var r = 360 * a.percents / 100,\n                q = Math.sin((n + r / 2) / 180 * Math.PI),\n                A = -Math.cos((n + r / 2) / 180 * Math.PI) * (b / g),\n                p = this.outlineColor;\n            p || (p = a.color);\n            var B = this.alpha;\n            isNaN(a.alpha) || (B = a.alpha);\n            p = {\n              fill: a.color,\n              stroke: p,\n              \"stroke-width\": this.outlineThickness,\n              \"stroke-opacity\": this.outlineAlpha,\n              \"fill-opacity\": B\n            };\n            a.url && (p.cursor = \"pointer\");\n            p = h.wedge(c, y, z, n, r, g, b, e, this.depth3D, p, this.gradientRatio, a.pattern);\n            h.setCN(this, p, \"pie-item\");\n            h.setCN(this, p.wedge, \"pie-slice\");\n            h.setCN(this, p, a.className, !0);\n            this.addEventListeners(p, a);\n            a.startAngle = n;\n            d[k].wedge = p;\n            0 < f && (this.chartCreated || p.setAttr(\"opacity\", this.startAlpha));\n            a.ix = q;\n            a.iy = A;\n            a.wedge = p;\n            a.index = k;\n\n            if (this.labelsEnabled && this.labelText && a.percents >= this.hideLabelsPercent) {\n              var l = n + r / 2;\n              360 < l && (l -= 360);\n              var t = x;\n              isNaN(a.labelRadius) || (t = a.labelRadius);\n              var r = y + q * (g + t),\n                  B = z + A * (g + t),\n                  C,\n                  w = 0;\n\n              if (0 <= t) {\n                var D;\n                90 >= l && 0 <= l ? (D = 0, C = \"start\", w = 8) : 90 <= l && 180 > l ? (D = 1, C = \"start\", w = 8) : 180 <= l && 270 > l ? (D = 2, C = \"end\", w = -8) : 270 <= l && 360 > l && (D = 3, C = \"end\", w = -8);\n                a.labelQuarter = D;\n              } else C = \"middle\";\n\n              var l = this.formatString(this.labelText, a),\n                  u = this.labelFunction;\n              u && (l = u(a, l));\n              u = a.labelColor;\n              u || (u = this.color);\n              \"\" !== l && (l = h.wrappedText(c, l, u, this.fontFamily, this.fontSize, C, !1, this.maxLabelWidth), h.setCN(this, l, \"pie-label\"), h.setCN(this, l, a.className, !0), l.translate(r + 1.5 * w, B), l.node.style.pointerEvents = \"none\", a.tx = r + 1.5 * w, a.ty = B, 0 <= t ? (t = l.getBBox(), u = h.rect(c, t.width + 5, t.height + 5, \"#FFFFFF\", .005), u.translate(r + 1.5 * w + t.x, B + t.y), a.hitRect = u, p.push(l), p.push(u)) : this.freeLabelsSet.push(l), a.label = l);\n              a.tx = r;\n              a.tx2 = r + w;\n              a.tx0 = y + q * g;\n              a.ty0 = z + A * g;\n            }\n\n            r = e + (g - e) / 2;\n            a.pulled && (r += this.pullOutRadiusReal);\n            a.balloonX = q * r + y;\n            a.balloonY = A * r + z;\n            a.startX = Math.round(q * v);\n            a.startY = Math.round(A * v);\n            a.pullX = Math.round(q * m);\n            a.pullY = Math.round(A * m);\n            this.graphsSet.push(p);\n            (0 === a.alpha || 0 < f && !this.chartCreated) && p.hide();\n            n += 360 * a.percents / 100;\n          }\n\n          0 < x && !this.labelRadiusField && this.arrangeLabels();\n          this.pieXReal = y;\n          this.pieYReal = z;\n          this.radiusReal = g;\n          this.innerRadiusReal = e;\n          0 < x && this.drawTicks();\n          this.initialStart();\n          this.setDepths();\n        }\n\n        (d = this.legend) && d.invalidateSize();\n      } else this.cleanChart();\n\n      this.dispDUpd();\n      this.chartCreated = !0;\n    },\n    setDepths: function () {\n      var d = this.chartData,\n          f;\n\n      for (f = 0; f < d.length; f++) {\n        var c = d[f],\n            b = c.wedge,\n            c = c.startAngle;\n        0 <= c && 180 > c ? b.toFront() : 180 <= c && b.toBack();\n      }\n    },\n    arrangeLabels: function () {\n      var d = this.chartData,\n          f = d.length,\n          c,\n          b;\n\n      for (b = f - 1; 0 <= b; b--) c = d[b], 0 !== c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 0, !0, 0);\n\n      for (b = 0; b < f; b++) c = d[b], 1 != c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 1, !1, 0);\n\n      for (b = f - 1; 0 <= b; b--) c = d[b], 2 != c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 2, !0, 0);\n\n      for (b = 0; b < f; b++) c = d[b], 3 != c.labelQuarter || c.hidden || this.checkOverlapping(b, c, 3, !1, 0);\n    },\n    checkOverlapping: function (d, f, c, b, h) {\n      var e,\n          k,\n          a = this.chartData,\n          v = a.length,\n          n = f.label;\n\n      if (n) {\n        if (!0 === b) for (k = d + 1; k < v; k++) a[k].labelQuarter == c && (e = this.checkOverlappingReal(f, a[k], c)) && (k = v);else for (k = d - 1; 0 <= k; k--) a[k].labelQuarter == c && (e = this.checkOverlappingReal(f, a[k], c)) && (k = 0);\n        !0 === e && 100 > h && (e = f.ty + 3 * f.iy, f.ty = e, n.translate(f.tx2, e), f.hitRect && (n = n.getBBox(), f.hitRect.translate(f.tx2 + n.x, e + n.y)), this.checkOverlapping(d, f, c, b, h + 1));\n      }\n    },\n    checkOverlappingReal: function (d, f, c) {\n      var b = !1,\n          m = d.label,\n          e = f.label;\n      d.labelQuarter != c || d.hidden || f.hidden || !e || (m = m.getBBox(), c = {}, c.width = m.width, c.height = m.height, c.y = d.ty, c.x = d.tx, d = e.getBBox(), e = {}, e.width = d.width, e.height = d.height, e.y = f.ty, e.x = f.tx, h.hitTest(c, e) && (b = !0));\n      return b;\n    }\n  });\n})();","map":null,"metadata":{},"sourceType":"script"}