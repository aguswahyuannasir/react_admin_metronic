{"ast":null,"code":"/***\r\nWrapper/Helper Class for datagrid based on jQuery Datatable Plugin\r\n***/\nvar Datatable = function () {\n  var tableOptions; // main options\n\n  var dataTable; // datatable object\n\n  var table; // actual table jquery object\n\n  var tableContainer; // actual table container object\n\n  var tableWrapper; // actual table wrapper jquery object\n\n  var tableInitialized = false;\n  var ajaxParams = {}; // set filter mode\n\n  var the;\n\n  var countSelectedRecords = function () {\n    var selected = $('tbody > tr > td:nth-child(1) input[type=\"checkbox\"]:checked', table).size();\n    var text = tableOptions.dataTable.language.metronicGroupActions;\n\n    if (selected > 0) {\n      $('.table-group-actions > span', tableWrapper).text(text.replace(\"_TOTAL_\", selected));\n    } else {\n      $('.table-group-actions > span', tableWrapper).text(\"\");\n    }\n  };\n\n  return {\n    //main function to initiate the module\n    init: function (options) {\n      if (!$().dataTable) {\n        return;\n      }\n\n      the = this; // default settings\n\n      options = $.extend(true, {\n        src: \"\",\n        // actual table  \n        filterApplyAction: \"filter\",\n        filterCancelAction: \"filter_cancel\",\n        resetGroupActionInputOnSuccess: true,\n        loadingMessage: 'Loading...',\n        dataTable: {\n          \"dom\": \"<'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'<'table-group-actions pull-right'>>r><'table-scrollable't><'row'<'col-md-8 col-sm-12'pli><'col-md-4 col-sm-12'>>\",\n          // datatable layout\n          \"pageLength\": 10,\n          // default records per page\n          \"language\": {\n            // language settings\n            // metronic spesific\n            \"metronicGroupActions\": \"_TOTAL_ records selected:  \",\n            \"metronicAjaxRequestGeneralError\": \"Could not complete request. Please check your internet connection\",\n            // data tables spesific\n            \"lengthMenu\": \"<span class='seperator'>|</span>View _MENU_ records\",\n            \"info\": \"<span class='seperator'>|</span>Found total _TOTAL_ records\",\n            \"infoEmpty\": \"No records found to show\",\n            \"emptyTable\": \"No data available in table\",\n            \"zeroRecords\": \"No matching records found\",\n            \"paginate\": {\n              \"previous\": \"Prev\",\n              \"next\": \"Next\",\n              \"last\": \"Last\",\n              \"first\": \"First\",\n              \"page\": \"Page\",\n              \"pageOf\": \"of\"\n            }\n          },\n          \"orderCellsTop\": true,\n          \"columnDefs\": [{\n            // define columns sorting options(by default all columns are sortable extept the first checkbox column)\n            'orderable': false,\n            'targets': [0]\n          }],\n          \"pagingType\": \"bootstrap_extended\",\n          // pagination type(bootstrap, bootstrap_full_number or bootstrap_extended)\n          \"autoWidth\": false,\n          // disable fixed width and enable fluid table\n          \"processing\": false,\n          // enable/disable display message box on record load\n          \"serverSide\": true,\n          // enable/disable server side ajax loading\n          \"ajax\": {\n            // define ajax settings\n            \"url\": \"\",\n            // ajax URL\n            \"type\": \"POST\",\n            // request type\n            \"timeout\": 20000,\n            \"data\": function (data) {\n              // add request parameters before submit\n              $.each(ajaxParams, function (key, value) {\n                data[key] = value;\n              });\n              Metronic.blockUI({\n                message: tableOptions.loadingMessage,\n                target: tableContainer,\n                overlayColor: 'none',\n                cenrerY: true,\n                boxed: true\n              });\n            },\n            \"dataSrc\": function (res) {\n              // Manipulate the data returned from the server\n              if (res.customActionMessage) {\n                Metronic.alert({\n                  type: res.customActionStatus == 'OK' ? 'success' : 'danger',\n                  icon: res.customActionStatus == 'OK' ? 'check' : 'warning',\n                  message: res.customActionMessage,\n                  container: tableWrapper,\n                  place: 'prepend'\n                });\n              }\n\n              if (res.customActionStatus) {\n                if (tableOptions.resetGroupActionInputOnSuccess) {\n                  $('.table-group-action-input', tableWrapper).val(\"\");\n                }\n              }\n\n              if ($('.group-checkable', table).size() === 1) {\n                $('.group-checkable', table).attr(\"checked\", false);\n                $.uniform.update($('.group-checkable', table));\n              }\n\n              if (tableOptions.onSuccess) {\n                tableOptions.onSuccess.call(undefined, the, res);\n              }\n\n              Metronic.unblockUI(tableContainer);\n              return res.data;\n            },\n            \"error\": function () {\n              // handle general connection errors\n              if (tableOptions.onError) {\n                tableOptions.onError.call(undefined, the);\n              }\n\n              Metronic.alert({\n                type: 'danger',\n                icon: 'warning',\n                message: tableOptions.dataTable.language.metronicAjaxRequestGeneralError,\n                container: tableWrapper,\n                place: 'prepend'\n              });\n              Metronic.unblockUI(tableContainer);\n            }\n          },\n          \"drawCallback\": function (oSettings) {\n            // run some code on table redraw\n            if (tableInitialized === false) {\n              // check if table has been initialized\n              tableInitialized = true; // set table initialized\n\n              table.show(); // display table\n            }\n\n            Metronic.initUniform($('input[type=\"checkbox\"]', table)); // reinitialize uniform checkboxes on each table reload\n\n            countSelectedRecords(); // reset selected records indicator\n            // callback for ajax data load\n\n            if (tableOptions.onDataLoad) {\n              tableOptions.onDataLoad.call(undefined, the);\n            }\n          }\n        }\n      }, options);\n      tableOptions = options; // create table's jquery object\n\n      table = $(options.src);\n      tableContainer = table.parents(\".table-container\"); // apply the special class that used to restyle the default datatable\n\n      var tmp = $.fn.dataTableExt.oStdClasses;\n      $.fn.dataTableExt.oStdClasses.sWrapper = $.fn.dataTableExt.oStdClasses.sWrapper + \" dataTables_extended_wrapper\";\n      $.fn.dataTableExt.oStdClasses.sFilterInput = \"form-control input-small input-sm input-inline\";\n      $.fn.dataTableExt.oStdClasses.sLengthSelect = \"form-control input-xsmall input-sm input-inline\"; // initialize a datatable\n\n      dataTable = table.DataTable(options.dataTable); // revert back to default\n\n      $.fn.dataTableExt.oStdClasses.sWrapper = tmp.sWrapper;\n      $.fn.dataTableExt.oStdClasses.sFilterInput = tmp.sFilterInput;\n      $.fn.dataTableExt.oStdClasses.sLengthSelect = tmp.sLengthSelect; // get table wrapper\n\n      tableWrapper = table.parents('.dataTables_wrapper'); // build table group actions panel\n\n      if ($('.table-actions-wrapper', tableContainer).size() === 1) {\n        $('.table-group-actions', tableWrapper).html($('.table-actions-wrapper', tableContainer).html()); // place the panel inside the wrapper\n\n        $('.table-actions-wrapper', tableContainer).remove(); // remove the template container\n      } // handle group checkboxes check/uncheck\n\n\n      $('.group-checkable', table).change(function () {\n        var set = $('tbody > tr > td:nth-child(1) input[type=\"checkbox\"]', table);\n        var checked = $(this).is(\":checked\");\n        $(set).each(function () {\n          $(this).attr(\"checked\", checked);\n        });\n        $.uniform.update(set);\n        countSelectedRecords();\n      }); // handle row's checkbox click\n\n      table.on('change', 'tbody > tr > td:nth-child(1) input[type=\"checkbox\"]', function () {\n        countSelectedRecords();\n      }); // handle filter submit button click\n\n      table.on('click', '.filter-submit', function (e) {\n        e.preventDefault();\n        the.submitFilter();\n      }); // handle filter cancel button click\n\n      table.on('click', '.filter-cancel', function (e) {\n        e.preventDefault();\n        the.resetFilter();\n      });\n    },\n    submitFilter: function () {\n      the.setAjaxParam(\"action\", tableOptions.filterApplyAction); // get all typeable inputs\n\n      $('textarea.form-filter, select.form-filter, input.form-filter:not([type=\"radio\"],[type=\"checkbox\"])', table).each(function () {\n        the.setAjaxParam($(this).attr(\"name\"), $(this).val());\n      }); // get all checkboxes\n\n      $('input.form-filter[type=\"checkbox\"]:checked', table).each(function () {\n        the.addAjaxParam($(this).attr(\"name\"), $(this).val());\n      }); // get all radio buttons\n\n      $('input.form-filter[type=\"radio\"]:checked', table).each(function () {\n        the.setAjaxParam($(this).attr(\"name\"), $(this).val());\n      });\n      dataTable.ajax.reload();\n    },\n    resetFilter: function () {\n      $('textarea.form-filter, select.form-filter, input.form-filter', table).each(function () {\n        $(this).val(\"\");\n      });\n      $('input.form-filter[type=\"checkbox\"]', table).each(function () {\n        $(this).attr(\"checked\", false);\n      });\n      the.clearAjaxParams();\n      the.addAjaxParam(\"action\", tableOptions.filterCancelAction);\n      dataTable.ajax.reload();\n    },\n    getSelectedRowsCount: function () {\n      return $('tbody > tr > td:nth-child(1) input[type=\"checkbox\"]:checked', table).size();\n    },\n    getSelectedRows: function () {\n      var rows = [];\n      $('tbody > tr > td:nth-child(1) input[type=\"checkbox\"]:checked', table).each(function () {\n        rows.push($(this).val());\n      });\n      return rows;\n    },\n    setAjaxParam: function (name, value) {\n      ajaxParams[name] = value;\n    },\n    addAjaxParam: function (name, value) {\n      if (!ajaxParams[name]) {\n        ajaxParams[name] = [];\n      }\n\n      skip = false;\n\n      for (var i = 0; i < ajaxParams[name].length; i++) {\n        // check for duplicates\n        if (ajaxParams[name][i] === value) {\n          skip = true;\n        }\n      }\n\n      if (skip === false) {\n        ajaxParams[name].push(value);\n      }\n    },\n    clearAjaxParams: function (name, value) {\n      ajaxParams = {};\n    },\n    getDataTable: function () {\n      return dataTable;\n    },\n    getTableWrapper: function () {\n      return tableWrapper;\n    },\n    gettableContainer: function () {\n      return tableContainer;\n    },\n    getTable: function () {\n      return table;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}